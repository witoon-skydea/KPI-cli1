import { Command } from 'commander';
import chalk from 'chalk';
import inquirer from 'inquirer';
import { DataEntryService } from '../../core/services/DataEntryService.js';
import { StaffService } from '../../core/services/StaffService.js';
import { KPIService } from '../../core/services/KPIService.js';
import { DepartmentService } from '../../core/services/DepartmentService.js';
import { EvaluationService } from '../../core/services/EvaluationService.js';
import { closeDatabase } from '../../database/connection.js';

const dataEntryService = new DataEntryService();
const staffService = new StaffService();
const kpiService = new KPIService();
const departmentService = new DepartmentService();
const evaluationService = new EvaluationService();

export const dataCommand = new Command('data')
  .description('Manage raw data entries');

dataCommand
  .command('entry')
  .description('Enter raw data for KPI calculations')
  .option('-s, --staff <id>', 'Staff ID')
  .option('-k, --kpi <id>', 'KPI ID')
  .option('-y, --year <year>', 'Year (default: current year)')
  .option('-q, --quarter <quarter>', 'Quarter (1-4, default: current quarter)')
  .action(async (options) => {
    try {
      await handleDataEntry(options);
    } catch (error: any) {
      console.error(chalk.red(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`));
    } finally {
      closeDatabase();
    }
  });

dataCommand
  .command('list')
  .description('List raw data entries')
  .option('-s, --staff <id>', 'Filter by staff ID')
  .option('-k, --kpi <id>', 'Filter by KPI ID')
  .option('-d, --department <id>', 'Filter by department ID')
  .option('-y, --year <year>', 'Filter by year')
  .option('-q, --quarter <quarter>', 'Filter by quarter')
  .action(async (options) => {
    try {
      await handleDataList(options);
    } catch (error: any) {
      console.error(chalk.red(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`));
    } finally {
      closeDatabase();
    }
  });

async function handleDataEntry(options: any) {
  console.log(chalk.bold.cyan('üìä ‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• KPI'));
  console.log(chalk.cyan('‚ïê'.repeat(50)));

  let staffId = options.staff;
  let kpiId = options.kpi;
  const year = options.year || new Date().getFullYear();
  const quarter = options.quarter || Math.ceil((new Date().getMonth() + 1) / 3);

  // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å‡∏Å‡πà‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô)
  if (!staffId) {
    const departments = await departmentService.findAll();
    if (departments.length === 0) {
      console.log(chalk.red('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÅ‡∏ú‡∏ô‡∏Å‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'));
      return;
    }

    const { selectedDepartment } = await inquirer.prompt([
      {
        type: 'list',
        name: 'selectedDepartment',
        message: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å:',
        choices: departments.map(dept => ({
          name: `${dept.name} (${dept.description || ''})`,
          value: dept.id
        }))
      }
    ]);

    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
    const staff = await staffService.findByDepartment(selectedDepartment);
    if (staff.length === 0) {
      console.log(chalk.red('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡πÅ‡∏ú‡∏ô‡∏Å‡∏ô‡∏µ‡πâ'));
      return;
    }

    const { selectedStaff } = await inquirer.prompt([
      {
        type: 'list',
        name: 'selectedStaff',
        message: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô:',
        choices: staff.map(s => ({
          name: `${s.name} (${s.position}) - ${s.email}`,
          value: s.id
        }))
      }
    ]);
    staffId = selectedStaff;
  }

  // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å KPI
  if (!kpiId) {
    const kpis = await kpiService.findAll();
    const activeKpis = kpis.filter(kpi => kpi.active);
    
    if (activeKpis.length === 0) {
      console.log(chalk.red('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö KPI ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà'));
      return;
    }

    const { selectedKpi } = await inquirer.prompt([
      {
        type: 'list',
        name: 'selectedKpi',
        message: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å KPI:',
        choices: activeKpis.map(kpi => ({
          name: `${kpi.name} (‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å: ${kpi.weight}%)`,
          value: kpi.id
        }))
      }
    ]);
    kpiId = selectedKpi;
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
  const existingData = await dataEntryService.findEntry(staffId, kpiId, year, quarter);
  if (existingData) {
    console.log(chalk.yellow(`‚ö†Ô∏è  ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö KPI ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™ ${quarter}/${year} ‡πÅ‡∏•‡πâ‡∏ß`));
    
    const { action } = await inquirer.prompt([
      {
        type: 'list',
        name: 'action',
        message: '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£:',
        choices: [
          { name: 'üìù ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°', value: 'update' },
          { name: 'üëÅÔ∏è  ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°', value: 'view' },
          { name: '‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å', value: 'cancel' }
        ]
      }
    ]);

    if (action === 'cancel') {
      console.log(chalk.gray('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'));
      return;
    }

    if (action === 'view') {
      console.log(chalk.blue('\nüìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:'));
      console.log(JSON.stringify(existingData.dataValuesJson, null, 2));
      return;
    }
  }

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• KPI ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const kpi = await kpiService.findById(kpiId);
  if (!kpi) {
    console.log(chalk.red('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö KPI ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏'));
    return;
  }

  console.log(chalk.blue(`\nüìä ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö KPI: ${kpi.name}`));
  console.log(chalk.gray(`üìù ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢: ${kpi.description}`));
  console.log(chalk.gray(`üìÖ ‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™: ${quarter}/${year}`));

  // ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  const rawDataSchema = kpi.rawDataSchemaJson as Record<string, any>;
  const dataValues: Record<string, unknown> = {};

  if (rawDataSchema && rawDataSchema.fields) {
    console.log(chalk.yellow('\nüìù ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:'));
    
    for (const field of rawDataSchema.fields) {
      const { value } = await inquirer.prompt([
        {
          type: field.type === 'number' ? 'number' : 'input',
          name: 'value',
          message: `${field.label} (${field.name}):`,
          validate: (input) => {
            if (field.required && !input && input !== 0) {
              return '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ';
            }
            if (field.type === 'number' && isNaN(Number(input))) {
              return '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç';
            }
            return true;
          }
        }
      ]);
      dataValues[field.name] = field.type === 'number' ? Number(value) : value;
    }
  } else {
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ schema ‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON
    const { jsonData } = await inquirer.prompt([
      {
        type: 'editor',
        name: 'jsonData',
        message: '‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON:',
        default: '{}'
      }
    ]);
    
    try {
      Object.assign(dataValues, JSON.parse(jsonData));
    } catch (error) {
      console.log(chalk.red('‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'));
      return;
    }
  }

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  try {
    if (existingData) {
      await dataEntryService.updateEntry(staffId, kpiId, year, quarter, { dataValues });
      console.log(chalk.green('‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'));
    } else {
      await dataEntryService.createEntry({
        staffId,
        kpiId,
        periodYear: year,
        periodQuarter: quarter,
        dataValues
      });
      console.log(chalk.green('‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'));
    }

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
    console.log(chalk.blue('\nüîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô...'));
    const evaluation = await evaluationService.calculateKPIEvaluation({
      staffId,
      kpiId,
      periodYear: year,
      periodQuarter: quarter
    });
    
    console.log(chalk.green('\nüìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô:'));
    console.log(`   ‡∏ú‡∏•‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì: ${evaluation.calculatedValue}`);
    console.log(`   ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: ${evaluation.score}/5`);
    console.log(`   ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: ${evaluation.targetValue || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`);
    
  } catch (error: any) {
    console.error(chalk.red(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: ${error.message}`));
  }
}

async function handleDataList(options: any) {
  console.log(chalk.bold.cyan('üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• KPI'));
  console.log(chalk.cyan('‚ïê'.repeat(50)));

  const filters: {
    staffId?: number;
    kpiId?: number;
    periodYear?: number;
    periodQuarter?: number;
  } = {};
  
  if (options.staff) filters.staffId = parseInt(options.staff);
  if (options.kpi) filters.kpiId = parseInt(options.kpi);
  if (options.year) filters.periodYear = parseInt(options.year);
  if (options.quarter) filters.periodQuarter = parseInt(options.quarter);

  // ‡∏ñ‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÅ‡∏ú‡∏ô‡∏Å ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡πÅ‡∏ú‡∏ô‡∏Å‡∏ô‡∏±‡πâ‡∏ô
  let staffIds: number[] | undefined;
  if (options.department) {
    const departmentStaff = await staffService.findByDepartment(parseInt(options.department));
    staffIds = departmentStaff.map(s => s.id);
    if (staffIds.length === 0) {
      console.log(chalk.red('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡πÅ‡∏ú‡∏ô‡∏Å‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏'));
      return;
    }
  }

  try {
    let entries: any[] = [];
    
    if (staffIds && staffIds.length > 0) {
      // Get entries for specific staff members
      for (const staffId of staffIds) {
        const staffEntries = await dataEntryService.getStaffEntries(
          staffId,
          filters.periodYear,
          filters.periodQuarter
        );
        entries.push(...staffEntries);
      }
    } else if (filters.staffId) {
      entries = await dataEntryService.getStaffEntries(
        filters.staffId,
        filters.periodYear,
        filters.periodQuarter
      );
    } else if (filters.kpiId) {
      entries = await dataEntryService.getKPIEntries(
        filters.kpiId,
        filters.periodYear,
        filters.periodQuarter
      );
    } else if (filters.periodYear && filters.periodQuarter) {
      entries = await dataEntryService.getPeriodEntries(
        filters.periodYear,
        filters.periodQuarter
      );
    } else {
      console.log(chalk.yellow('‚ö†Ô∏è  ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤'));
      return;
    }
    
    if (entries.length === 0) {
      console.log(chalk.yellow('‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏'));
      return;
    }

    console.log(chalk.green(`\nüìä ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ${entries.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n`));

    for (const entry of entries) {
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞ KPI
      const staff = await staffService.findById(entry.staffId);
      const kpi = await kpiService.findById(entry.kpiId);
      
      console.log(chalk.bold(`${staff?.name || 'Unknown'} - ${kpi?.name || 'Unknown'}`));
      console.log(`   üìÖ ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤: Q${entry.periodQuarter}/${entry.periodYear}`);
      console.log(`   üë§ ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô: ${staff?.email || 'N/A'}`);
      console.log(`   üìä KPI: ${kpi?.description || 'N/A'}`);
      console.log(`   üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ${JSON.stringify(entry.dataValuesJson, null, 2)}`);
      console.log(`   üïê ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${entry.createdAt?.toLocaleString('th-TH') || 'N/A'}`);
      console.log('   ' + '‚îÄ'.repeat(40));
    }
  } catch (error: any) {
    console.error(chalk.red(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`));
  }
}