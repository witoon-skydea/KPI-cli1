import { Command } from 'commander';
import chalk from 'chalk';
import inquirer from 'inquirer';
import { ReportService } from '../../core/services/ReportService.js';
import { closeDatabase } from '../../database/connection.js';

const reportService = new ReportService();

export const reportCommand = new Command('report')
  .description('Generate reports');

reportCommand
  .command('quarterly')
  .description('Generate quarterly reports')
  .option('-d, --department <id>', 'Department ID')
  .option('-y, --year <year>', 'Year (default: current year)')
  .option('-q, --quarter <quarter>', 'Quarter (1-4)')
  .action(async (options) => {
    try {
      let departmentId = options.department;
      let year = options.year || new Date().getFullYear();
      let quarter = options.quarter;

      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÅ‡∏ú‡∏ô‡∏Å ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
      if (!departmentId) {
        const departments = await reportService.getAllDepartments();
        if (departments.length === 0) {
          console.log(chalk.red('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÅ‡∏ú‡∏ô‡∏Å‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'));
          return;
        }

        const { selectedDepartment } = await inquirer.prompt([
          {
            type: 'list',
            name: 'selectedDepartment',
            message: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô:',
            choices: departments.map(dept => ({
              name: `${dept.name} (ID: ${dept.id})`,
              value: dept.id
            }))
          }
        ]);
        departmentId = selectedDepartment;
      }

      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™ ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
      if (!quarter) {
        const { selectedQuarter } = await inquirer.prompt([
          {
            type: 'list',
            name: 'selectedQuarter',
            message: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™:',
            choices: [
              { name: '‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™‡∏ó‡∏µ‡πà 1 (‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°-‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°)', value: 1 },
              { name: '‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™‡∏ó‡∏µ‡πà 2 (‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô-‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô)', value: 2 },
              { name: '‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™‡∏ó‡∏µ‡πà 3 (‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°-‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô)', value: 3 },
              { name: '‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™‡∏ó‡∏µ‡πà 4 (‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°-‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°)', value: 4 }
            ]
          }
        ]);
        quarter = selectedQuarter;
      }

      console.log(chalk.blue('\nüîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™...\n'));

      const report = await reportService.generateQuarterlyReport(
        parseInt(departmentId),
        parseInt(year),
        parseInt(quarter)
      );

      displayQuarterlyReport(report);

    } catch (error: any) {
      console.error(chalk.red(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`));
    } finally {
      closeDatabase();
    }
  });

reportCommand
  .command('annual')
  .description('Generate annual reports')
  .action(async () => {
    console.log(chalk.yellow('üöß Annual reporting features coming soon'));
  });

function displayQuarterlyReport(report: any) {
  const { period, department, staffReports, departmentSummary } = report;

  // Header
  console.log(chalk.bold.cyan('‚ïê'.repeat(80)));
  console.log(chalk.bold.cyan(`üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô ${period.displayName}`));
  console.log(chalk.bold.cyan(`üè¢ ‡πÅ‡∏ú‡∏ô‡∏Å: ${department.name}`));
  console.log(chalk.bold.cyan('‚ïê'.repeat(80)));

  // Department Summary
  console.log(chalk.bold.yellow('\nüìà ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡∏Å'));
  console.log('‚îÄ'.repeat(50));
  console.log(`üë• ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô: ${departmentSummary.totalStaff} ‡∏Ñ‡∏ô`);
  console.log(`üìä ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: ${reportService.formatPercentage(departmentSummary.averageScore)}`);
  
  console.log('\nüèÜ ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡∏£‡∏î:');
  Object.entries(departmentSummary.gradeDistribution).forEach(([grade, count]) => {
    const color = reportService.getGradeColor(grade);
    console.log(`  ${chalk[color](`‡πÄ‡∏Å‡∏£‡∏î ${grade}`)}: ${count} ‡∏Ñ‡∏ô`);
  });

  if (departmentSummary.topPerformers.length > 0) {
    console.log('\nüåü ‡∏ú‡∏π‡πâ‡∏°‡∏µ‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡∏î‡∏µ‡πÄ‡∏î‡πà‡∏ô:');
    departmentSummary.topPerformers.forEach((staff: any, index: number) => {
      console.log(`  ${index + 1}. ${staff.name} (${staff.position})`);
    });
  }

  // KPI Performance
  console.log(chalk.bold.yellow('\nüìã ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ KPI'));
  console.log('‚îÄ'.repeat(50));
  departmentSummary.kpiPerformance.forEach((kpiPerf: any, index: number) => {
    console.log(`${index + 1}. ${chalk.bold(kpiPerf.kpi.name)}`);
    console.log(`   üìä ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: ${reportService.formatScore(kpiPerf.averageScore)}`);
    console.log(`   üéØ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏Ç‡∏≠‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: ${reportService.formatPercentage(kpiPerf.targetAchievement)}`);
    console.log(`   üë• ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô: ${kpiPerf.staffCount} ‡∏Ñ‡∏ô`);
    console.log('');
  });

  // Individual Staff Reports
  console.log(chalk.bold.green('\nüë§ ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•'));
  console.log('‚ïê'.repeat(80));

  staffReports.forEach((staffReport: any, index: number) => {
    const { staff, evaluations, summary } = staffReport;
    
    console.log(`\n${index + 1}. ${chalk.bold(staff.name)} (${staff.position})`);
    console.log(`   üìß ${staff.email}`);
    console.log(`   üèÜ ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°: ${reportService.formatPercentage(summary.percentageScore)} (‡πÄ‡∏Å‡∏£‡∏î ${chalk[reportService.getGradeColor(summary.grade)](summary.grade)})`);
    
    console.log('   üìä ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î KPI:');
    evaluations.forEach((evaluation: any) => {
      const achievementPercent = evaluation.targetValue > 0 
        ? ((evaluation.calculatedValue / evaluation.targetValue) * 100).toFixed(1)
        : 'N/A';
      
      console.log(`      ‚Ä¢ ${evaluation.kpi.name}`);
      console.log(`        ‡∏ú‡∏•‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: ${reportService.formatScore(evaluation.score)} | ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: ${evaluation.targetValue || 'N/A'} | ‡∏ú‡∏•‡∏à‡∏£‡∏¥‡∏á: ${evaluation.calculatedValue}`);
      if (achievementPercent !== 'N/A') {
        console.log(`        ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${achievementPercent}%`);
      }
    });
    
    if (index < staffReports.length - 1) {
      console.log('   ' + '‚îÄ'.repeat(50));
    }
  });

  console.log(chalk.bold.cyan('\n‚ïê'.repeat(80)));
  console.log(chalk.bold.cyan(`üìÖ ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${new Date().toLocaleString('th-TH')}`));
  console.log(chalk.bold.cyan('‚ïê'.repeat(80)));
}