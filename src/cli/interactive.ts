import inquirer from 'inquirer';
import chalk from 'chalk';
import { DepartmentService } from '../core/services/DepartmentService.js';
import { StaffService } from '../core/services/StaffService.js';
import { KPIService } from '../core/services/KPIService.js';
import { StaffKPIService } from '../core/services/StaffKPIService.js';
import { DataEntryService } from '../core/services/DataEntryService.js';
import { EvaluationService } from '../core/services/EvaluationService.js';
import { ReportService } from '../core/services/ReportService.js';
import { closeDatabase } from '../database/connection.js';
import type { Department, Staff, KPI } from '../types/index.js';

export class InteractiveCLI {
  private departmentService = new DepartmentService();
  private staffService = new StaffService();
  private kpiService = new KPIService();
  private staffKPIService = new StaffKPIService();
  private dataEntryService = new DataEntryService();
  private evaluationService = new EvaluationService();
  private reportService = new ReportService();

  async start(): Promise<void> {
    console.log(chalk.bold.cyan('\nüéØ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ KPI'));
    console.log(chalk.cyan('‚ïê'.repeat(50)));

    while (true) {
      try {
        const { action } = await inquirer.prompt([
          {
            type: 'list',
            name: 'action',
            message: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:',
            choices: [
              { name: 'üìä ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô', value: 'reports' },
              { name: 'üë• ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô', value: 'staff' },
              { name: 'üéØ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ KPI', value: 'kpi' },
              { name: 'üìù ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏á‡∏≤‡∏ô', value: 'data-entry' },
              { name: 'üîÑ ‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢ KPI', value: 'assign-kpi' },
              { name: 'üìä ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û', value: 'analytics' },
              { name: 'üè¢ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏ú‡∏ô‡∏Å', value: 'departments' },
              { name: 'üö™ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö', value: 'exit' }
            ]
          }
        ]);

        switch (action) {
          case 'reports':
            await this.handleReports();
            break;
          case 'staff':
            await this.handleStaff();
            break;
          case 'kpi':
            await this.handleKPI();
            break;
          case 'data-entry':
            await this.handleDataEntry();
            break;
          case 'assign-kpi':
            await this.handleAssignKPI();
            break;
          case 'analytics':
            await this.handleAdvancedAnalytics();
            break;
          case 'departments':
            await this.handleDepartments();
            break;
          case 'exit':
            console.log(chalk.green('\nüëã ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£!'));
            return;
        }

        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
        console.log('\n' + '‚îÄ'.repeat(50));
        
        const { continue: continueWork } = await inquirer.prompt([
          {
            type: 'confirm',
            name: 'continue',
            message: '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',
            default: true
          }
        ]);

        if (!continueWork) {
          console.log(chalk.green('\nüëã ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£!'));
          break;
        }

      } catch (error: any) {
        console.error(chalk.red(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`));
        
        const { retry } = await inquirer.prompt([
          {
            type: 'confirm',
            name: 'retry',
            message: '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',
            default: true
          }
        ]);

        if (!retry) break;
      }
    }

    closeDatabase();
  }

  private async handleReports(): Promise<void> {
    console.log(chalk.bold.yellow('\nüìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô'));
    console.log('‚îÄ'.repeat(30));

    const { reportType } = await inquirer.prompt([
      {
        type: 'list',
        name: 'reportType',
        message: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô:',
        choices: [
          { name: 'üìà ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™', value: 'quarterly' },
          { name: 'üìÖ ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏õ‡∏µ (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°)', value: 'annual' },
          { name: 'üîô ‡∏Å‡∏•‡∏±‡∏ö', value: 'back' }
        ]
      }
    ]);

    if (reportType === 'back') return;

    if (reportType === 'quarterly') {
      await this.generateQuarterlyReport();
    } else {
      console.log(chalk.yellow('üöß ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'));
    }
  }

  private async generateQuarterlyReport(): Promise<void> {
    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å
    const departments = await this.departmentService.findAll();
    if (departments.length === 0) {
      console.log(chalk.red('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÅ‡∏ú‡∏ô‡∏Å‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'));
      return;
    }

    const { departmentId } = await inquirer.prompt([
      {
        type: 'list',
        name: 'departmentId',
        message: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å:',
        choices: departments.map(dept => ({
          name: `${dept.name} (${dept.description || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢'})`,
          value: dept.id
        }))
      }
    ]);

    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ
    const currentYear = new Date().getFullYear();
    const { year } = await inquirer.prompt([
      {
        type: 'list',
        name: 'year',
        message: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ:',
        choices: [
          { name: `${currentYear} (‡∏õ‡∏µ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)`, value: currentYear },
          { name: `${currentYear - 1}`, value: currentYear - 1 },
          { name: `${currentYear + 1}`, value: currentYear + 1 }
        ]
      }
    ]);

    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™
    const { quarter } = await inquirer.prompt([
      {
        type: 'list',
        name: 'quarter',
        message: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™:',
        choices: [
          { name: '‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™‡∏ó‡∏µ‡πà 1 (‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°-‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°)', value: 1 },
          { name: '‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™‡∏ó‡∏µ‡πà 2 (‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô-‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô)', value: 2 },
          { name: '‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™‡∏ó‡∏µ‡πà 3 (‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°-‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô)', value: 3 },
          { name: '‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™‡∏ó‡∏µ‡πà 4 (‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°-‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°)', value: 4 }
        ]
      }
    ]);

    console.log(chalk.blue('\nüîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô...\n'));

    try {
      const report = await this.reportService.generateQuarterlyReport(
        departmentId,
        year,
        quarter
      );

      this.displayQuarterlyReport(report);
    } catch (error: any) {
      console.error(chalk.red(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ: ${error.message}`));
    }
  }

  private displayQuarterlyReport(report: any): void {
    const { period, department, staffReports, departmentSummary } = report;

    // Header
    console.log(chalk.bold.cyan('‚ïê'.repeat(80)));
    console.log(chalk.bold.cyan(`üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô ${period.displayName}`));
    console.log(chalk.bold.cyan(`üè¢ ‡πÅ‡∏ú‡∏ô‡∏Å: ${department.name}`));
    console.log(chalk.bold.cyan('‚ïê'.repeat(80)));

    // Department Summary
    console.log(chalk.bold.yellow('\nüìà ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡∏Å'));
    console.log('‚îÄ'.repeat(50));
    console.log(`üë• ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô: ${departmentSummary.totalStaff} ‡∏Ñ‡∏ô`);
    console.log(`üìä ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: ${this.reportService.formatPercentage(departmentSummary.averageScore)}`);
    
    console.log('\nüèÜ ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡∏£‡∏î:');
    Object.entries(departmentSummary.gradeDistribution).forEach(([grade, count]) => {
      const color = this.reportService.getGradeColor(grade);
      console.log(`  ${chalk[color](`‡πÄ‡∏Å‡∏£‡∏î ${grade}`)}: ${count} ‡∏Ñ‡∏ô`);
    });

    if (departmentSummary.topPerformers.length > 0) {
      console.log('\nüåü ‡∏ú‡∏π‡πâ‡∏°‡∏µ‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡∏î‡∏µ‡πÄ‡∏î‡πà‡∏ô:');
      departmentSummary.topPerformers.forEach((staff: any, index: number) => {
        console.log(`  ${index + 1}. ${staff.name} (${staff.position})`);
      });
    }

    // Individual Staff Reports
    console.log(chalk.bold.green('\nüë§ ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•'));
    console.log('‚ïê'.repeat(80));

    staffReports.forEach((staffReport: any, index: number) => {
      const { staff, evaluations, summary } = staffReport;
      
      console.log(`\n${index + 1}. ${chalk.bold(staff.name)} (${staff.position})`);
      console.log(`   üèÜ ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°: ${this.reportService.formatPercentage(summary.percentageScore || 0)} (‡πÄ‡∏Å‡∏£‡∏î ${chalk[this.reportService.getGradeColor(summary.grade || 'F')](summary.grade || 'F')})`);
      
      console.log('   üìä ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î KPI:');
      evaluations.forEach((evaluation: any) => {
        const achievementPercent = evaluation.targetValue > 0 
          ? ((evaluation.calculatedValue / evaluation.targetValue) * 100).toFixed(1)
          : 'N/A';
        
        console.log(`      ‚Ä¢ ${evaluation.kpi.name}`);
        console.log(`        ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: ${this.reportService.formatScore(evaluation.score)} | ‡∏ú‡∏•‡∏à‡∏£‡∏¥‡∏á: ${evaluation.calculatedValue} | ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: ${evaluation.targetValue || 'N/A'}`);
        if (achievementPercent !== 'N/A') {
          console.log(`        ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${achievementPercent}%`);
        }
      });
      
      if (index < staffReports.length - 1) {
        console.log('   ' + '‚îÄ'.repeat(50));
      }
    });

    console.log(chalk.bold.cyan('\n‚ïê'.repeat(80)));
  }

  private async handleStaff(): Promise<void> {
    console.log(chalk.bold.yellow('\nüë• ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô'));
    console.log('‚îÄ'.repeat(20));

    const { staffAction } = await inquirer.prompt([
      {
        type: 'list',
        name: 'staffAction',
        message: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£:',
        choices: [
          { name: 'üìã ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô', value: 'list' },
          { name: 'üëÅÔ∏è  ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô', value: 'detail' },
          { name: '‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà', value: 'add' },
          { name: '‚úèÔ∏è  ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô', value: 'edit' },
          { name: 'üìä ‡∏î‡∏π‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏£‡∏≤‡∏¢‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•', value: 'performance' },
          { name: 'üîô ‡∏Å‡∏•‡∏±‡∏ö', value: 'back' }
        ]
      }
    ]);

    if (staffAction === 'back') return;

    switch (staffAction) {
      case 'list':
        await this.listStaff();
        break;
      case 'detail':
        await this.viewStaffDetail();
        break;
      case 'add':
        await this.addStaff();
        break;
      case 'edit':
        await this.editStaff();
        break;
      case 'performance':
        await this.viewStaffPerformance();
        break;
    }
  }

  private async listStaff(): Promise<void> {
    const staff = await this.staffService.findAll();
    
    if (staff.length === 0) {
      console.log(chalk.yellow('üìù ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'));
      return;
    }

    console.log(chalk.bold.green('\nüìã ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô'));
    console.log('‚îÄ'.repeat(50));

    // ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡πÅ‡∏ú‡∏ô‡∏Å
    const departments = await this.departmentService.findAll();
    const deptMap = new Map(departments.map(d => [d.id, d.name]));

    staff.forEach((employee, index) => {
      const statusIcon = employee.active ? '‚úÖ' : '‚ùå';
      const deptName = deptMap.get(employee.departmentId || 0) || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
      
      console.log(`${index + 1}. ${statusIcon} ${chalk.bold(employee.name)} (${employee.employeeId})`);
      console.log(`   üìß ${employee.email}`);
      console.log(`   üè¢ ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: ${employee.position || 'N/A'}`);
      console.log(`   üè¢ ‡πÅ‡∏ú‡∏ô‡∏Å: ${deptName}`);
      console.log(`   üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô: ${employee.hireDate}`);
      console.log(`   üü¢ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${employee.active ? '‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà' : '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'}`);
      if (index < staff.length - 1) {
        console.log('');
      }
    });
  }

  private async viewStaffDetail(): Promise<void> {
    const staff = await this.staffService.findAll();
    
    if (staff.length === 0) {
      console.log(chalk.yellow('üìù ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'));
      return;
    }

    const { selectedStaff } = await inquirer.prompt([
      {
        type: 'list',
        name: 'selectedStaff',
        message: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:',
        choices: staff.map(s => ({
          name: `${s.name} (${s.employeeId}) - ${s.position}`,
          value: s.id
        }))
      }
    ]);

    const selectedEmployee = staff.find(s => s.id === selectedStaff)!;
    const department = await this.departmentService.findById(selectedEmployee.departmentId || 0);
    
    console.log(chalk.bold.blue('\nüë§ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô'));
    console.log('‚ïê'.repeat(60));
    console.log(`üìõ ‡∏ä‡∏∑‡πà‡∏≠: ${chalk.bold(selectedEmployee.name)}`);
    console.log(`üè∑Ô∏è  ‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô: ${selectedEmployee.employeeId}`);
    console.log(`üìß ‡∏≠‡∏µ‡πÄ‡∏°‡∏•: ${selectedEmployee.email}`);
    console.log(`üè¢ ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: ${selectedEmployee.position || 'N/A'}`);
    console.log(`üè¢ ‡πÅ‡∏ú‡∏ô‡∏Å: ${department?.name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`);
    console.log(`üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô: ${selectedEmployee.hireDate}`);
    console.log(`üü¢ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${selectedEmployee.active ? '‚úÖ ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà' : '‚ùå ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'}`);
    console.log(`üïê ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${selectedEmployee.createdAt || 'N/A'}`);
    console.log(`üîÑ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ${selectedEmployee.updatedAt || 'N/A'}`);

    // ‡∏î‡∏π KPI ‡∏ó‡∏µ‡πà‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢
    try {
      const assignedKPIs = await this.staffKPIService.getStaffKPIs(selectedEmployee.id);
      if (assignedKPIs.length > 0) {
        console.log('\nüéØ KPI ‡∏ó‡∏µ‡πà‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢:');
        assignedKPIs.forEach((kpi: any, index: number) => {
          console.log(`  ${index + 1}. ${kpi.name} (‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å: ${kpi.weight}%)`);
        });
      } else {
        console.log('\n‚ö†Ô∏è  ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢ KPI');
      }
    } catch (error) {
      console.log('\n‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• KPI');
    }
  }

  private async editStaff(): Promise<void> {
    const staff = await this.staffService.findAll();
    
    if (staff.length === 0) {
      console.log(chalk.yellow('üìù ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'));
      return;
    }

    const { selectedStaff } = await inquirer.prompt([
      {
        type: 'list',
        name: 'selectedStaff',
        message: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:',
        choices: staff.map(s => ({
          name: `${s.name} (${s.employeeId}) - ${s.position}`,
          value: s.id
        }))
      }
    ]);

    const selectedEmployee = staff.find(s => s.id === selectedStaff)!;
    const departments = await this.departmentService.findAll();
    
    console.log(chalk.bold.yellow(`\n‚úèÔ∏è  ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ${selectedEmployee.name}`));
    console.log('‚îÄ'.repeat(50));

    const { name, email, position, departmentId, active } = await inquirer.prompt([
      {
        type: 'input',
        name: 'name',
        message: '‡∏ä‡∏∑‡πà‡∏≠:',
        default: selectedEmployee.name,
        validate: (input) => input.trim() ? true : '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠'
      },
      {
        type: 'input',
        name: 'email',
        message: '‡∏≠‡∏µ‡πÄ‡∏°‡∏•:',
        default: selectedEmployee.email,
        validate: (input) => {
          const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
          return emailRegex.test(input) ? true : '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
        }
      },
      {
        type: 'input',
        name: 'position',
        message: '‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á:',
        default: selectedEmployee.position,
        validate: (input) => input.trim() ? true : '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á'
      },
      {
        type: 'list',
        name: 'departmentId',
        message: '‡πÅ‡∏ú‡∏ô‡∏Å:',
        choices: departments.map(dept => ({
          name: dept.name,
          value: dept.id
        })),
        default: selectedEmployee.departmentId
      },
      {
        type: 'confirm',
        name: 'active',
        message: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô:',
        default: selectedEmployee.active
      }
    ]);

    try {
      await this.staffService.update(selectedEmployee.id, {
        name: name.trim(),
        email: email.trim(),
        position: position.trim(),
        departmentId,
        active
      });
      
      console.log(chalk.green('‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'));
    } catch (error: any) {
      console.error(chalk.red(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`));
    }
  }

  private async viewStaffPerformance(): Promise<void> {
    const staff = await this.staffService.findAll();
    
    if (staff.length === 0) {
      console.log(chalk.yellow('üìù ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'));
      return;
    }

    const { selectedStaff } = await inquirer.prompt([
      {
        type: 'list',
        name: 'selectedStaff',
        message: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô:',
        choices: staff.map(s => ({
          name: `${s.name} (${s.employeeId}) - ${s.position}`,
          value: s.id
        }))
      }
    ]);

    const { year, quarter } = await inquirer.prompt([
      {
        type: 'input',
        name: 'year',
        message: '‡∏õ‡∏µ (‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô):',
        default: new Date().getFullYear().toString(),
        validate: (input) => {
          const year = parseInt(input);
          return (year >= 2020 && year <= 2030) ? true : '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏õ‡∏µ‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 2020-2030';
        }
      },
      {
        type: 'list',
        name: 'quarter',
        message: '‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™:',
        choices: [
          { name: '‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™‡∏ó‡∏µ‡πà 1 (‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°-‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°)', value: 1 },
          { name: '‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™‡∏ó‡∏µ‡πà 2 (‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô-‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô)', value: 2 },
          { name: '‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™‡∏ó‡∏µ‡πà 3 (‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°-‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô)', value: 3 },
          { name: '‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™‡∏ó‡∏µ‡πà 4 (‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°-‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°)', value: 4 }
        ],
        default: Math.ceil((new Date().getMonth() + 1) / 3)
      }
    ]);

    try {
      const summary = await this.evaluationService.calculateStaffSummary(
        selectedStaff,
        parseInt(year),
        quarter
      );
      
      const evaluations = await this.evaluationService.getStaffEvaluations(
        selectedStaff,
        parseInt(year),
        quarter
      );

      const selectedEmployee = staff.find(s => s.id === selectedStaff)!;

      console.log(chalk.bold.magenta('\nüìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏£‡∏≤‡∏¢‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•'));
      console.log('‚ïê'.repeat(60));
      console.log(`üë§ ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô: ${chalk.bold(selectedEmployee.name)}`);
      console.log(`üìÖ ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤: Q${quarter}/${year}`);
      console.log(`üèÜ ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°: ${this.reportService.formatPercentage(summary.percentageScore || 0)}`);
      console.log(`üèÖ ‡πÄ‡∏Å‡∏£‡∏î: ${chalk[this.reportService.getGradeColor(summary.grade || 'F')](summary.grade || 'F')}`);
      
      if (evaluations.length > 0) {
        console.log('\nüìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î KPI:');
        for (const evaluation of evaluations) {
          const kpi = await this.kpiService.findById(evaluation.kpiId);
          if (kpi) {
            console.log(`\n  ‚Ä¢ ${chalk.bold(kpi.name)}`);
            console.log(`    üìä ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: ${this.reportService.formatScore(evaluation.score || 0)}`);
            console.log(`    üìà ‡∏ú‡∏•‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì: ${evaluation.calculatedValue || 0}`);
            console.log(`    üéØ ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: ${evaluation.targetValue || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`);
            if (evaluation.targetValue && evaluation.calculatedValue) {
              const achievement = (evaluation.calculatedValue / evaluation.targetValue) * 100;
              console.log(`    üìà ‡∏ú‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${achievement.toFixed(1)}%`);
            }
          }
        }
      } else {
        console.log('\n‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏µ‡πâ');
      }
    } catch (error: any) {
      console.error(chalk.red(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô: ${error.message}`));
    }
  }

  private async addStaff(): Promise<void> {
    console.log(chalk.bold.blue('\n‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà'));
    console.log('‚îÄ'.repeat(20));

    // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ú‡∏ô‡∏Å
    const departments = await this.departmentService.findAll();
    if (departments.length === 0) {
      console.log(chalk.red('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÅ‡∏ú‡∏ô‡∏Å‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏Å‡πà‡∏≠‡∏ô'));
      return;
    }

    const answers = await inquirer.prompt([
      {
        type: 'input',
        name: 'employeeId',
        message: '‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô:',
        validate: (input: string) => input.length > 0 || '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô'
      },
      {
        type: 'input',
        name: 'name',
        message: '‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•:',
        validate: (input: string) => input.length > 0 || '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•'
      },
      {
        type: 'input',
        name: 'email',
        message: '‡∏≠‡∏µ‡πÄ‡∏°‡∏•:',
        validate: (input: string) => {
          if (input.length === 0) return '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏≠‡∏µ‡πÄ‡∏°‡∏•';
          if (!input.includes('@')) return '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
          return true;
        }
      },
      {
        type: 'list',
        name: 'departmentId',
        message: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å:',
        choices: departments.map(dept => ({
          name: dept.name,
          value: dept.id
        }))
      },
      {
        type: 'input',
        name: 'position',
        message: '‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á:',
        validate: (input: string) => input.length > 0 || '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á'
      },
      {
        type: 'input',
        name: 'hireDate',
        message: '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô (YYYY-MM-DD):',
        default: new Date().toISOString().split('T')[0],
        validate: (input: string) => {
          if (!/^\d{4}-\d{2}-\d{2}$/.test(input)) {
            return '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (YYYY-MM-DD)';
          }
          return true;
        }
      }
    ]);

    try {
      const newStaff = await this.staffService.create(answers);
      console.log(chalk.green(`‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô ${newStaff.name} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`));
    } catch (error: any) {
      console.error(chalk.red(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ: ${error.message}`));
    }
  }

  private async handleKPI(): Promise<void> {
    console.log(chalk.bold.yellow('\nüéØ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ KPI'));
    console.log('‚îÄ'.repeat(15));

    const { kpiAction } = await inquirer.prompt([
      {
        type: 'list',
        name: 'kpiAction',
        message: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£:',
        choices: [
          { name: 'üìã ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ KPI', value: 'list' },
          { name: 'üëÅÔ∏è  ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î KPI', value: 'detail' },
          { name: '‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏° KPI ‡πÉ‡∏´‡∏°‡πà', value: 'add' },
          { name: '‚úèÔ∏è  ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç KPI', value: 'edit' },
          { name: 'üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏π‡∏ï‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì', value: 'test-formula' },
          { name: 'üìä ‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô', value: 'analytics' },
          { name: 'üîô ‡∏Å‡∏•‡∏±‡∏ö', value: 'back' }
        ]
      }
    ]);

    if (kpiAction === 'back') return;

    switch (kpiAction) {
      case 'list':
        await this.listKPIs();
        break;
      case 'detail':
        await this.viewKPIDetail();
        break;
      case 'add':
        await this.addKPI();
        break;
      case 'edit':
        await this.editKPI();
        break;
      case 'test-formula':
        await this.testKPIFormula();
        break;
      case 'analytics':
        await this.viewKPIAnalytics();
        break;
    }
  }

  private async listKPIs(): Promise<void> {
    const kpis = await this.kpiService.findAll();
    
    if (kpis.length === 0) {
      console.log(chalk.yellow('üìù ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ KPI ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'));
      return;
    }

    console.log(chalk.bold.green('\nüìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ KPI'));
    console.log('‚îÄ'.repeat(50));

    kpis.forEach((kpi, index) => {
      const statusIcon = kpi.active ? '‚úÖ' : '‚ùå';
      console.log(`${index + 1}. ${statusIcon} ${chalk.bold(kpi.name)}`);
      console.log(`   üìù ${kpi.description}`);
      console.log(`   ‚öñÔ∏è ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å: ${kpi.weight}%`);
      console.log(`   üéØ ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: ${kpi.targetValue || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`);
      console.log(`   üü¢ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${kpi.active ? '‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà' : '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'}`);
      if (index < kpis.length - 1) {
        console.log('');
      }
    });
  }

  private async viewKPIDetail(): Promise<void> {
    const kpis = await this.kpiService.findAll();
    
    if (kpis.length === 0) {
      console.log(chalk.yellow('üìù ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ KPI ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'));
      return;
    }

    const { selectedKPI } = await inquirer.prompt([
      {
        type: 'list',
        name: 'selectedKPI',
        message: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å KPI ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:',
        choices: kpis.map(kpi => ({
          name: `${kpi.name} (‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å: ${kpi.weight}%)`,
          value: kpi.id
        }))
      }
    ]);

    const selectedKPIData = kpis.find(k => k.id === selectedKPI)!;
    
    console.log(chalk.bold.blue('\nüéØ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î KPI'));
    console.log('‚ïê'.repeat(60));
    console.log(`üè∑Ô∏è  ‡∏ä‡∏∑‡πà‡∏≠: ${chalk.bold(selectedKPIData.name)}`);
    console.log(`üìù ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢: ${selectedKPIData.description}`);
    console.log(`‚öñÔ∏è  ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å: ${selectedKPIData.weight}%`);
    console.log(`üéØ ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: ${selectedKPIData.targetValue || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`);
    console.log(`üü¢ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${selectedKPIData.active ? '‚úÖ ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà' : '‚ùå ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'}`);
    console.log(`üïê ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${selectedKPIData.createdAt || 'N/A'}`);
    console.log(`üîÑ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ${selectedKPIData.updatedAt || 'N/A'}`);
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏π‡∏ï‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
    console.log('\nüß™ ‡∏™‡∏π‡∏ï‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì:');
    if (selectedKPIData.formulaJson) {
      console.log(JSON.stringify(selectedKPIData.formulaJson, null, 2));
    } else {
      console.log('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏π‡∏ï‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì');
    }
    
    // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
    console.log('\nüìâ ‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô:');
    if (selectedKPIData.scoringCriteriaJson) {
      console.log(JSON.stringify(selectedKPIData.scoringCriteriaJson, null, 2));
    } else {
      console.log('‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô');
    }
    
    // ‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    console.log('\nüìä ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:');
    if (selectedKPIData.rawDataSchemaJson) {
      console.log(JSON.stringify(selectedKPIData.rawDataSchemaJson, null, 2));
    } else {
      console.log('‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
    }
  }

  private async editKPI(): Promise<void> {
    const kpis = await this.kpiService.findAll();
    
    if (kpis.length === 0) {
      console.log(chalk.yellow('üìù ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ KPI ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'));
      return;
    }

    const { selectedKPI } = await inquirer.prompt([
      {
        type: 'list',
        name: 'selectedKPI',
        message: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å KPI ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:',
        choices: kpis.map(kpi => ({
          name: `${kpi.name} (‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å: ${kpi.weight}%)`,
          value: kpi.id
        }))
      }
    ]);

    const selectedKPIData = kpis.find(k => k.id === selectedKPI)!;
    
    console.log(chalk.bold.yellow(`\n‚úèÔ∏è  ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç KPI: ${selectedKPIData.name}`));
    console.log('‚îÄ'.repeat(50));

    const { name, description, weight, targetValue, active } = await inquirer.prompt([
      {
        type: 'input',
        name: 'name',
        message: '‡∏ä‡∏∑‡πà‡∏≠ KPI:',
        default: selectedKPIData.name,
        validate: (input) => input.trim() ? true : '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠ KPI'
      },
      {
        type: 'input',
        name: 'description',
        message: '‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢:',
        default: selectedKPIData.description,
        validate: (input) => input.trim() ? true : '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢'
      },
      {
        type: 'number',
        name: 'weight',
        message: '‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å (0.1-100%):',
        default: selectedKPIData.weight,
        validate: (input) => {
          if (isNaN(input) || input < 0.1 || input > 100) {
            return '‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 0.1-100%';
          }
          return true;
        }
      },
      {
        type: 'number',
        name: 'targetValue',
        message: '‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ (‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ):',
        default: selectedKPIData.targetValue || undefined
      },
      {
        type: 'confirm',
        name: 'active',
        message: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:',
        default: selectedKPIData.active
      }
    ]);

    try {
      await this.kpiService.update(selectedKPI, {
        name: name.trim(),
        description: description.trim(),
        weight,
        targetValue: targetValue || null,
        active
      });
      
      console.log(chalk.green('‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç KPI ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'));
    } catch (error: any) {
      console.error(chalk.red(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`));
    }
  }

  private async testKPIFormula(): Promise<void> {
    const kpis = await this.kpiService.findAll();
    
    if (kpis.length === 0) {
      console.log(chalk.yellow('üìù ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ KPI ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'));
      return;
    }

    const kpisWithFormula = kpis.filter(kpi => kpi.formulaJson && kpi.active);
    
    if (kpisWithFormula.length === 0) {
      console.log(chalk.yellow('‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏°‡∏µ KPI ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏π‡∏ï‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà'));
      return;
    }

    const { selectedKPI } = await inquirer.prompt([
      {
        type: 'list',
        name: 'selectedKPI',
        message: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å KPI ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏π‡∏ï‡∏£:',
        choices: kpisWithFormula.map(kpi => ({
          name: `${kpi.name} (‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å: ${kpi.weight}%)`,
          value: kpi.id
        }))
      }
    ]);

    const selectedKPIData = kpisWithFormula.find(k => k.id === selectedKPI)!;
    
    console.log(chalk.bold.blue(`\nüß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏π‡∏ï‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì: ${selectedKPIData.name}`));
    console.log('‚îÄ'.repeat(50));
    
    try {
      // Note: testFormula method needs to be implemented in KPIService
      console.log(chalk.yellow('üöß ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏π‡∏ï‡∏£‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤'));
    } catch (error: any) {
      console.error(chalk.red(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö: ${error.message}`));
    }
  }

  private async viewKPIAnalytics(): Promise<void> {
    const kpis = await this.kpiService.findAll();
    
    if (kpis.length === 0) {
      console.log(chalk.yellow('üìù ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ KPI ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'));
      return;
    }

    console.log(chalk.bold.magenta('\nüìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô KPI'));
    console.log('‚ïê'.repeat(60));
    
    const activeKpis = kpis.filter(kpi => kpi.active);
    const inactiveKpis = kpis.filter(kpi => !kpi.active);
    
    console.log(`üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô KPI ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${kpis.length}`);
    console.log(`‚úÖ KPI ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà: ${activeKpis.length}`);
    console.log(`‚ùå KPI ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: ${inactiveKpis.length}`);
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å
    const totalWeight = activeKpis.reduce((sum, kpi) => sum + kpi.weight, 0);
    console.log(`\n‚öñÔ∏è  ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á KPI ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: ${totalWeight.toFixed(1)}%`);
    
    if (totalWeight !== 100) {
      const difference = 100 - totalWeight;
      if (difference > 0) {
        console.log(chalk.yellow(`‚ö†Ô∏è  ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏¢‡∏±‡∏á‡∏Ç‡∏≤‡∏î‡∏≠‡∏µ‡∏Å: ${difference.toFixed(1)}%`));
      } else {
        console.log(chalk.red(`‚ùå ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô 100%: ${Math.abs(difference).toFixed(1)}%`));
      }
    } else {
      console.log(chalk.green('‚úÖ ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏£‡∏ß‡∏°‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö 100% ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'));
    }
    
    // ‡πÅ‡∏™‡∏î‡∏á KPI ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
    const topKpis = activeKpis.sort((a, b) => b.weight - a.weight).slice(0, 5);
    console.log('\nüèÜ KPI ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î:');
    topKpis.forEach((kpi, index) => {
      console.log(`  ${index + 1}. ${kpi.name} - ${kpi.weight}%`);
    });
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏≤‡∏£‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏π‡∏ï‡∏£‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡∏ì‡∏ë‡πå
    const kpisWithFormula = kpis.filter(kpi => kpi.formulaJson).length;
    const kpisWithCriteria = kpis.filter(kpi => kpi.scoringCriteriaJson).length;
    const kpisWithSchema = kpis.filter(kpi => kpi.rawDataSchemaJson).length;
    
    console.log('\nüìä ‡∏™‡∏≤‡∏£‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå:');
    console.log(`  üß™ KPI ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏π‡∏ï‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì: ${kpisWithFormula}/${kpis.length}`);
    console.log(`  üìâ KPI ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: ${kpisWithCriteria}/${kpis.length}`);
    console.log(`  üìä KPI ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ${kpisWithSchema}/${kpis.length}`);
    
    const completionPercentage = ((kpisWithFormula + kpisWithCriteria + kpisWithSchema) / (kpis.length * 3) * 100);
    console.log(`\nüìä ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°: ${completionPercentage.toFixed(1)}%`);
  }

  private async addKPI(): Promise<void> {
    console.log(chalk.bold.blue('\n‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏° KPI ‡πÉ‡∏´‡∏°‡πà'));
    console.log('‚îÄ'.repeat(20));

    const answers = await inquirer.prompt([
      {
        type: 'input',
        name: 'name',
        message: '‡∏ä‡∏∑‡πà‡∏≠ KPI:',
        validate: (input: string) => input.length > 0 || '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠ KPI'
      },
      {
        type: 'input',
        name: 'description',
        message: '‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢:',
        validate: (input: string) => input.length > 0 || '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢'
      },
      {
        type: 'number',
        name: 'weight',
        message: '‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å (1.0-5.0):',
        default: 1.0,
        validate: (input: number) => {
          if (isNaN(input) || input < 0.1 || input > 5.0) {
            return '‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 0.1-5.0';
          }
          return true;
        }
      },
      {
        type: 'number',
        name: 'targetValue',
        message: '‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ (‡πÄ‡∏•‡∏Ç‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°, ‡∏´‡∏£‡∏∑‡∏≠ 0 ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ):',
        default: 0
      }
    ]);

    try {
      const newKPI = await this.kpiService.create({
        name: answers.name,
        description: answers.description,
        weight: answers.weight,
        targetValue: answers.targetValue > 0 ? answers.targetValue : null
      });
      console.log(chalk.green(`‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° KPI "${newKPI.name}" ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`));
    } catch (error: any) {
      console.error(chalk.red(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° KPI ‡πÑ‡∏î‡πâ: ${error.message}`));
    }
  }

  private async handleDataEntry(): Promise<void> {
    console.log(chalk.bold.yellow('\nüìù ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏á‡∏≤‡∏ô'));
    console.log('‚îÄ'.repeat(25));

    const { entryType } = await inquirer.prompt([
      {
        type: 'list',
        name: 'entryType',
        message: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å:',
        choices: [
          { name: 'üë§ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•', value: 'individual' },
          { name: 'üë• ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏ö‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏° (‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô)', value: 'bulk' },
          { name: 'üè¢ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏±‡πâ‡∏á‡πÅ‡∏ú‡∏ô‡∏Å', value: 'department' },
          { name: 'üîô ‡∏Å‡∏•‡∏±‡∏ö', value: 'back' }
        ]
      }
    ]);

    if (entryType === 'back') return;

    switch (entryType) {
      case 'individual':
        await this.handleIndividualDataEntry();
        break;
      case 'bulk':
        await this.handleBulkDataEntry();
        break;
      case 'department':
        await this.handleDepartmentDataEntry();
        break;
    }
  }

  private async handleIndividualDataEntry(): Promise<void> {
    console.log(chalk.bold.blue('\nüë§ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•'));
    console.log('‚îÄ'.repeat(30));

    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
    const staff = await this.staffService.findAll();
    if (staff.length === 0) {
      console.log(chalk.red('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'));
      return;
    }

    const { staffId } = await inquirer.prompt([
      {
        type: 'list',
        name: 'staffId',
        message: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô:',
        choices: staff.map(s => ({
          name: `${s.name} (${s.employeeId})`,
          value: s.id
        }))
      }
    ]);

    // ‡∏î‡∏∂‡∏á KPI ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
    const assignments = await this.staffKPIService.getStaffKPIs(staffId);
    const activeAssignments = assignments.filter(a => a.active);

    if (activeAssignments.length === 0) {
      console.log(chalk.red('‚ùå ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢ KPI'));
      return;
    }

    const { kpiId } = await inquirer.prompt([
      {
        type: 'list',
        name: 'kpiId',
        message: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å KPI:',
        choices: activeAssignments.map(a => ({
          name: `${a.kpiName} (‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å: ${a.kpiWeight})`,
          value: a.kpiId
        }))
      }
    ]);

    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
    const currentYear = new Date().getFullYear();
    const { year, quarter } = await inquirer.prompt([
      {
        type: 'list',
        name: 'year',
        message: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ:',
        choices: [
          { name: `${currentYear}`, value: currentYear },
          { name: `${currentYear - 1}`, value: currentYear - 1 },
          { name: `${currentYear + 1}`, value: currentYear + 1 }
        ]
      },
      {
        type: 'list',
        name: 'quarter',
        message: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™:',
        choices: [
          { name: '‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™‡∏ó‡∏µ‡πà 1', value: 1 },
          { name: '‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™‡∏ó‡∏µ‡πà 2', value: 2 },
          { name: '‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™‡∏ó‡∏µ‡πà 3', value: 3 },
          { name: '‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™‡∏ó‡∏µ‡πà 4', value: 4 }
        ]
      }
    ]);

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• KPI
    const kpi = await this.kpiService.findById(kpiId);
    if (!kpi) {
      console.log(chalk.red('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• KPI'));
      return;
    }

    console.log(chalk.blue(`\nüìä ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: ${kpi.name}`));
    console.log(`üìù ${kpi.description}`);

    // ‡∏ñ‡πâ‡∏≤ KPI ‡∏°‡∏µ raw data schema ‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏≤‡∏° schema
    if (kpi.rawDataSchemaJson && kpi.rawDataSchemaJson.fields) {
      const dataValues: Record<string, number> = {};
      
      for (const field of kpi.rawDataSchemaJson.fields) {
        const { value } = await inquirer.prompt([
          {
            type: 'number',
            name: 'value',
            message: `${field.description || field.name}:`,
            validate: (input: number) => {
              if (field.required && (isNaN(input) || input === null)) {
                return '‡∏ä‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å';
              }
              return true;
            }
          }
        ]);
        dataValues[field.name] = value;
      }

      try {
        await this.dataEntryService.createEntry({
          staffId,
          kpiId,
          periodYear: year,
          periodQuarter: quarter,
          dataValues
        });

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
        const evaluation = await this.evaluationService.calculateKPIEvaluation({
          staffId,
          kpiId,
          periodYear: year,
          periodQuarter: quarter
        });

        console.log(chalk.green(`‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`));
        console.log(chalk.blue(`üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô: ${evaluation.calculatedValue} (${evaluation.score}/5 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô)`));
      } catch (error: any) {
        console.error(chalk.red(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: ${error.message}`));
      }
    } else {
      // KPI ‡πÑ‡∏°‡πà‡∏°‡∏µ schema ‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
      const { value } = await inquirer.prompt([
        {
          type: 'number',
          name: 'value',
          message: `‡∏Ñ‡πà‡∏≤‡∏ú‡∏•‡∏á‡∏≤‡∏ô:`,
          validate: (input: number) => !isNaN(input) || '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç'
        }
      ]);

      try {
        await this.dataEntryService.createEntry({
          staffId,
          kpiId,
          periodYear: year,
          periodQuarter: quarter,
          dataValues: { value }
        });

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
        const evaluation = await this.evaluationService.calculateKPIEvaluation({
          staffId,
          kpiId,
          periodYear: year,
          periodQuarter: quarter
        });

        console.log(chalk.green(`‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`));
        console.log(chalk.blue(`üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô: ${evaluation.calculatedValue} (${evaluation.score}/5 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô)`));
      } catch (error: any) {
        console.error(chalk.red(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: ${error.message}`));
      }
    }
  }

  private async handleAssignKPI(): Promise<void> {
    console.log(chalk.bold.yellow('\nüîÑ ‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢ KPI'));
    console.log('‚îÄ'.repeat(20));

    const { assignAction } = await inquirer.prompt([
      {
        type: 'list',
        name: 'assignAction',
        message: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£:',
        choices: [
          { name: '‚ûï ‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢ KPI ‡πÉ‡∏´‡∏°‡πà', value: 'assign' },
          { name: 'üìã ‡∏î‡∏π‡∏Å‡∏≤‡∏£‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô', value: 'list' },
          { name: 'üîô ‡∏Å‡∏•‡∏±‡∏ö', value: 'back' }
        ]
      }
    ]);

    if (assignAction === 'back') return;

    switch (assignAction) {
      case 'assign':
        await this.assignKPI();
        break;
      case 'list':
        await this.listAssignments();
        break;
    }
  }

  private async assignKPI(): Promise<void> {
    console.log(chalk.bold.blue('\n‚ûï ‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢ KPI ‡πÉ‡∏´‡∏°‡πà'));
    console.log('‚îÄ'.repeat(20));

    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
    const staff = await this.staffService.findAll();
    if (staff.length === 0) {
      console.log(chalk.red('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'));
      return;
    }

    const { staffId } = await inquirer.prompt([
      {
        type: 'list',
        name: 'staffId',
        message: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô:',
        choices: staff.map(s => ({
          name: `${s.name} (${s.employeeId})`,
          value: s.id
        }))
      }
    ]);

    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å KPI
    const kpis = await this.kpiService.findAll();
    if (kpis.length === 0) {
      console.log(chalk.red('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö KPI ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'));
      return;
    }

    const { kpiId } = await inquirer.prompt([
      {
        type: 'list',
        name: 'kpiId',
        message: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å KPI:',
        choices: kpis.map(k => ({
          name: `${k.name} (‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å: ${k.weight})`,
          value: k.id
        }))
      }
    ]);

    try {
      await this.staffKPIService.assignKPI({
        staffId,
        kpiId,
        assignedDate: new Date().toISOString()
      });

      const selectedStaff = staff.find(s => s.id === staffId);
      const selectedKPI = kpis.find(k => k.id === kpiId);
      
      console.log(chalk.green(`‚úÖ ‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢ "${selectedKPI?.name}" ‡πÉ‡∏´‡πâ ${selectedStaff?.name} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`));
    } catch (error: any) {
      console.error(chalk.red(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢ KPI ‡πÑ‡∏î‡πâ: ${error.message}`));
    }
  }

  private async listAssignments(): Promise<void> {
    const assignments = await this.staffKPIService.getActiveAssignments();
    
    if (assignments.length === 0) {
      console.log(chalk.yellow('üìù ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢ KPI'));
      return;
    }

    console.log(chalk.bold.green('\nüìã ‡∏Å‡∏≤‡∏£‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢ KPI ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô'));
    console.log('‚îÄ'.repeat(50));

    assignments.forEach((assignment, index) => {
      console.log(`${index + 1}. ${chalk.bold(assignment.staffName)} ‚Üí ${assignment.kpiName}`);
      console.log(`   üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢: ${assignment.assignedDate}`);
      console.log(`   ‚öñÔ∏è ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å: ${assignment.kpiWeight}`);
      if (index < assignments.length - 1) {
        console.log('');
      }
    });
  }

  private async handleDepartments(): Promise<void> {
    console.log(chalk.bold.yellow('\nüè¢ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏ú‡∏ô‡∏Å'));
    console.log('‚îÄ'.repeat(15));

    const { deptAction } = await inquirer.prompt([
      {
        type: 'list',
        name: 'deptAction',
        message: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£:',
        choices: [
          { name: 'üìã ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ú‡∏ô‡∏Å', value: 'list' },
          { name: '‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ú‡∏ô‡∏Å‡πÉ‡∏´‡∏°‡πà', value: 'add' },
          { name: 'üîô ‡∏Å‡∏•‡∏±‡∏ö', value: 'back' }
        ]
      }
    ]);

    if (deptAction === 'back') return;

    switch (deptAction) {
      case 'list':
        await this.listDepartments();
        break;
      case 'add':
        await this.addDepartment();
        break;
    }
  }

  private async listDepartments(): Promise<void> {
    const departments = await this.departmentService.findAll();
    
    if (departments.length === 0) {
      console.log(chalk.yellow('üìù ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏ú‡∏ô‡∏Å‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'));
      return;
    }

    console.log(chalk.bold.green('\nüìã ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ú‡∏ô‡∏Å'));
    console.log('‚îÄ'.repeat(50));

    for (const dept of departments) {
      const staffCount = await this.staffService.findByDepartment(dept.id);
      console.log(`${chalk.bold(dept.name)}`);
      console.log(`   üìù ${dept.description || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢'}`);
      console.log(`   üë• ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô: ${staffCount.length} ‡∏Ñ‡∏ô`);
      console.log('');
    }
  }

  private async addDepartment(): Promise<void> {
    console.log(chalk.bold.blue('\n‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ú‡∏ô‡∏Å‡πÉ‡∏´‡∏°‡πà'));
    console.log('‚îÄ'.repeat(20));

    const answers = await inquirer.prompt([
      {
        type: 'input',
        name: 'name',
        message: '‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ú‡∏ô‡∏Å:',
        validate: (input: string) => input.length > 0 || '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ú‡∏ô‡∏Å'
      },
      {
        type: 'input',
        name: 'description',
        message: '‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢ (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö):'
      }
    ]);

    try {
      const newDept = await this.departmentService.create({
        name: answers.name,
        description: answers.description || null
      });
      console.log(chalk.green(`‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ú‡∏ô‡∏Å "${newDept.name}" ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`));
    } catch (error: any) {
      console.error(chalk.red(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ú‡∏ô‡∏Å‡πÑ‡∏î‡πâ: ${error.message}`));
    }
  }

  private async handleAdvancedAnalytics(): Promise<void> {
    console.log(chalk.bold.magenta('\nüìä ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û'));
    console.log('‚îÄ'.repeat(30));

    const { analyticsAction } = await inquirer.prompt([
      {
        type: 'list',
        name: 'analyticsAction',
        message: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:',
        choices: [
          { name: 'üìà ‡∏î‡∏π‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô', value: 'trends' },
          { name: 'üèÜ ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô', value: 'compare' },
          { name: 'üìâ ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•', value: 'completeness' },
          { name: 'üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á', value: 'search' },
          { name: 'üìä ‡∏î‡∏≤‡∏™‡∏´‡πå‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏£‡∏ß‡∏°', value: 'dashboard' },
          { name: 'üíæ ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•', value: 'export' },
          { name: 'üîô ‡∏Å‡∏•‡∏±‡∏ö', value: 'back' }
        ]
      }
    ]);

    if (analyticsAction === 'back') return;

    switch (analyticsAction) {
      case 'trends':
        await this.viewPerformanceTrends();
        break;
      case 'compare':
        await this.comparePerformance();
        break;
      case 'completeness':
        await this.viewDataCompleteness();
        break;
      case 'search':
        await this.searchAdvanced();
        break;
      case 'dashboard':
        await this.showDashboard();
        break;
      case 'export':
        await this.exportData();
        break;
    }
  }

  private async viewPerformanceTrends(): Promise<void> {
    console.log(chalk.bold.cyan('\nüìà ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô'));
    console.log('‚îÄ'.repeat(50));

    const departments = await this.departmentService.findAll();
    if (departments.length === 0) {
      console.log(chalk.yellow('‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏ú‡∏ô‡∏Å‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'));
      return;
    }

    const { departmentId, year } = await inquirer.prompt([
      {
        type: 'list',
        name: 'departmentId',
        message: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å:',
        choices: departments.map(dept => ({
          name: dept.name,
          value: dept.id
        }))
      },
      {
        type: 'input',
        name: 'year',
        message: '‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:',
        default: new Date().getFullYear().toString(),
        validate: (input) => {
          const year = parseInt(input);
          return (year >= 2020 && year <= 2030) ? true : '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏õ‡∏µ‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 2020-2030';
        }
      }
    ]);

    try {
      const yearInt = parseInt(year);
      const quarterlyData: Array<{
        quarter: number;
        averageScore: number;
        staffCount: number;
        topPerformer: string;
      }> = [];
      
      console.log(chalk.blue('\nüîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™...'));
      
      for (let quarter = 1; quarter <= 4; quarter++) {
        try {
          const report = await this.reportService.generateQuarterlyReport(departmentId, yearInt, quarter);
          quarterlyData.push({
            quarter,
            averageScore: report.departmentSummary.averageScore,
            staffCount: report.departmentSummary.totalStaff,
            topPerformer: report.departmentSummary.topPerformers[0]?.name || '‡πÑ‡∏°‡πà‡∏°‡∏µ'
          });
        } catch (error) {
          quarterlyData.push({ quarter, averageScore: 0, staffCount: 0, topPerformer: '‡πÑ‡∏°‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' });
        }
      }

      console.log(chalk.bold.green('\nüìà ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏£‡∏≤‡∏¢‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™'));
      console.log('‚ïê'.repeat(70));

      quarterlyData.forEach((data, index) => {
        const trendIcon = index > 0 ? 
          (data.averageScore > (quarterlyData[index - 1]?.averageScore ?? 0) ? 'üìà' : 
           data.averageScore < (quarterlyData[index - 1]?.averageScore ?? 0) ? 'üìâ' : '‚û°Ô∏è') : 'üèÅ';
        
        console.log(`Q${data.quarter}: ${trendIcon} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: ${data.averageScore.toFixed(1)}% | ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô: ${data.staffCount} ‡∏Ñ‡∏ô | ‡∏ú‡∏π‡πâ‡∏ô‡∏≥: ${data.topPerformer}`);
      });

      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°
      const validQuarters = quarterlyData.filter(d => d.averageScore > 0);
      if (validQuarters.length >= 2) {
        const firstHalf = validQuarters.slice(0, Math.floor(validQuarters.length / 2));
        const secondHalf = validQuarters.slice(Math.floor(validQuarters.length / 2));
        const firstAvg = firstHalf.reduce((sum, d) => sum + d.averageScore, 0) / firstHalf.length;
        const secondAvg = secondHalf.reduce((sum, d) => sum + d.averageScore, 0) / secondHalf.length;
        
        console.log('\nüìâ ‡∏™‡∏£‡∏∏‡∏õ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°:');
        if (secondAvg > firstAvg + 2) {
          console.log(chalk.green('üìà ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á'));
        } else if (secondAvg < firstAvg - 2) {
          console.log(chalk.red('üìâ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏î‡∏•‡∏á'));
        } else {
          console.log(chalk.yellow('‚û°Ô∏è  ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏á‡∏ó‡∏µ‡πà'));
        }
      }
    } catch (error: any) {
      console.error(chalk.red(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`));
    }
  }

  private async comparePerformance(): Promise<void> {
    console.log(chalk.bold.cyan('\nüèÜ ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô'));
    console.log('‚îÄ'.repeat(50));

    const { comparisonType } = await inquirer.prompt([
      {
        type: 'list',
        name: 'comparisonType',
        message: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö:',
        choices: [
          { name: 'üè¢ ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å', value: 'departments' },
          { name: 'üë• ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô', value: 'staff' },
          { name: 'üéØ ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á KPI', value: 'kpis' }
        ]
      }
    ]);

    switch (comparisonType) {
      case 'departments':
        await this.compareDepartments();
        break;
      case 'staff':
        await this.compareStaff();
        break;
      case 'kpis':
        await this.compareKPIs();
        break;
    }
  }

  private async compareDepartments(): Promise<void> {
    const departments = await this.departmentService.findAll();
    if (departments.length < 2) {
      console.log(chalk.yellow('‚ö†Ô∏è  ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 ‡πÅ‡∏ú‡∏ô‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö'));
      return;
    }

    const { year, quarter } = await inquirer.prompt([
      {
        type: 'input',
        name: 'year',
        message: '‡∏õ‡∏µ:',
        default: new Date().getFullYear().toString()
      },
      {
        type: 'list',
        name: 'quarter',
        message: '‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™:',
        choices: [1, 2, 3, 4].map(q => ({ name: `Q${q}`, value: q }))
      }
    ]);

    console.log(chalk.bold.magenta('\nüè¢ ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å'));
    console.log('‚ïê'.repeat(60));

    const departmentScores = [];
    for (const dept of departments) {
      try {
        const report = await this.reportService.generateQuarterlyReport(dept.id, parseInt(year), quarter);
        departmentScores.push({
          name: dept.name,
          score: report.departmentSummary.averageScore,
          staffCount: report.departmentSummary.totalStaff
        });
      } catch (error) {
        departmentScores.push({ name: dept.name, score: 0, staffCount: 0 });
      }
    }

    departmentScores.sort((a, b) => b.score - a.score);
    
    departmentScores.forEach((dept, index) => {
      const rank = index + 1;
      const rankIcon = rank === 1 ? 'ü•á' : rank === 2 ? 'ü•à' : rank === 3 ? 'ü•â' : `${rank}.`;
      const scoreColor = dept.score >= 80 ? 'green' : dept.score >= 60 ? 'yellow' : 'red';
      
      console.log(`${rankIcon} ${chalk.bold(dept.name)}: ${chalk[scoreColor](dept.score.toFixed(1) + '%')} (‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô ${dept.staffCount} ‡∏Ñ‡∏ô)`);
    });
  }

  private async compareStaff(): Promise<void> {
    // Implementation for staff comparison
    console.log(chalk.yellow('üöß ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤'));
  }

  private async compareKPIs(): Promise<void> {
    // Implementation for KPI comparison
    console.log(chalk.yellow('üöß ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤'));
  }

  private async viewDataCompleteness(): Promise<void> {
    console.log(chalk.bold.cyan('\nüìâ ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'));
    console.log('‚îÄ'.repeat(50));

    const departments = await this.departmentService.findAll();
    const staff = await this.staffService.findAll();
    const kpis = await this.kpiService.findAll();
    
    console.log('üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö:');
    console.log(`  üè¢ ‡πÅ‡∏ú‡∏ô‡∏Å: ${departments.length}`);
    console.log(`  üë• ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô: ${staff.length} (‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: ${staff.filter(s => s.active).length})`);
    console.log(`  üéØ KPI: ${kpis.length} (‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: ${kpis.filter(k => k.active).length})`);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const currentYear = new Date().getFullYear();
    const currentQuarter = Math.ceil((new Date().getMonth() + 1) / 3);
    
    console.log(`\nüìÖ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Q${currentQuarter}/${currentYear}:`);
    
    for (const dept of departments) {
      const deptStaff = staff.filter(s => s.departmentId === dept.id && s.active);
      let dataEntryCount = 0;
      let totalExpected = deptStaff.length * kpis.filter(k => k.active).length;
      
      for (const employee of deptStaff) {
        try {
          const summary = await this.evaluationService.calculateStaffSummary(
            employee.id, currentYear, currentQuarter
          );
          if (summary) dataEntryCount++;
        } catch (error) {
          // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        }
      }
      
      const completeness = totalExpected > 0 ? (dataEntryCount / totalExpected * 100) : 100;
      const completenessColor = completeness >= 80 ? 'green' : completeness >= 50 ? 'yellow' : 'red';
      
      console.log(`  ${chalk.bold(dept.name)}: ${chalk[completenessColor](completeness.toFixed(1) + '%')} (${dataEntryCount}/${totalExpected})`);
    }
  }

  private async searchAdvanced(): Promise<void> {
    console.log(chalk.bold.cyan('\nüîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á'));
    console.log('‚îÄ'.repeat(50));

    const { searchType } = await inquirer.prompt([
      {
        type: 'list',
        name: 'searchType',
        message: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤:',
        choices: [
          { name: 'üë• ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô', value: 'staff' },
          { name: 'üéØ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ KPI', value: 'kpi' },
          { name: 'üìã ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô', value: 'evaluations' }
        ]
      }
    ]);

    const { searchTerm } = await inquirer.prompt([
      {
        type: 'input',
        name: 'searchTerm',
        message: '‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤:',
        validate: (input) => input.trim().length > 0 || '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤'
      }
    ]);

    const term = searchTerm.toLowerCase().trim();
    
    switch (searchType) {
      case 'staff':
        const staff = await this.staffService.findAll();
        const matchingStaff = staff.filter(s => 
          s.name.toLowerCase().includes(term) || 
          s.email.toLowerCase().includes(term) ||
          s.employeeId.toLowerCase().includes(term) ||
          (s.position?.toLowerCase().includes(term) ?? false)
        );
        
        console.log(chalk.bold.green(`\nüîç ‡∏û‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô ${matchingStaff.length} ‡∏£‡∏≤‡∏¢`));
        matchingStaff.forEach((s, index) => {
          console.log(`${index + 1}. ${chalk.bold(s.name)} (${s.employeeId}) - ${s.position || 'N/A'}`);
          console.log(`   üìß ${s.email}`);
        });
        break;
        
      case 'kpi':
        const kpis = await this.kpiService.findAll();
        const matchingKPIs = kpis.filter(k => 
          k.name.toLowerCase().includes(term) || 
          (k.description?.toLowerCase().includes(term) ?? false)
        );
        
        console.log(chalk.bold.green(`\nüîç ‡∏û‡∏ö KPI ${matchingKPIs.length} ‡∏£‡∏≤‡∏¢`));
        matchingKPIs.forEach((k, index) => {
          console.log(`${index + 1}. ${chalk.bold(k.name)} (‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å: ${k.weight}%)`);
          console.log(`   üìù ${k.description || 'N/A'}`);
        });
        break;
        
      case 'evaluations':
        console.log(chalk.yellow('üöß ‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤'));
        break;
    }
  }

  private async showDashboard(): Promise<void> {
    console.log(chalk.bold.magenta('\nüìä ‡∏î‡∏≤‡∏™‡∏´‡πå‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏£‡∏ß‡∏°'));
    console.log('‚ïê'.repeat(60));

    try {
      // ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°
      const departments = await this.departmentService.findAll();
      const staff = await this.staffService.findAll();
      const kpis = await this.kpiService.findAll();
      
      console.log('üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏ß‡∏°‡∏£‡∏∞‡∏ö‡∏ö:');
      console.log(`  üè¢ ‡πÅ‡∏ú‡∏ô‡∏Å: ${departments.length}`);
      console.log(`  üë• ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô: ${staff.length} (‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: ${staff.filter(s => s.active).length})`);
      console.log(`  üéØ KPI: ${kpis.length} (‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: ${kpis.filter(k => k.active).length})`);
      
      const currentYear = new Date().getFullYear();
      const currentQuarter = Math.ceil((new Date().getMonth() + 1) / 3);
      
      console.log(`\nüìÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (Q${currentQuarter}/${currentYear}):`);
      
      // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ú‡∏ô‡∏Å
      for (const dept of departments.slice(0, 3)) { // ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà 3 ‡πÅ‡∏ú‡∏ô‡∏Å‡πÅ‡∏£‡∏Å
        try {
          const report = await this.reportService.generateQuarterlyReport(dept.id, currentYear, currentQuarter);
          const avgScore = report.departmentSummary.averageScore;
          const scoreColor = avgScore >= 80 ? 'green' : avgScore >= 60 ? 'yellow' : 'red';
          
          console.log(`  ${chalk.bold(dept.name)}: ${chalk[scoreColor](avgScore.toFixed(1) + '%')} (‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô ${report.departmentSummary.totalStaff} ‡∏Ñ‡∏ô)`);
        } catch (error) {
          console.log(`  ${chalk.bold(dept.name)}: ${chalk.gray('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')}`);
        }
      }
      
      console.log('\nüìà ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á:');
      console.log('‚Ä¢ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô');
      console.log('‚Ä¢ ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô');
      console.log('‚Ä¢ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö');
      
    } catch (error: any) {
      console.error(chalk.red(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`));
    }
  }

  private async exportData(): Promise<void> {
    console.log(chalk.bold.cyan('\nüíæ ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'));
    console.log('‚îÄ'.repeat(50));

    const { exportType } = await inquirer.prompt([
      {
        type: 'list',
        name: 'exportType',
        message: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å:',
        choices: [
          { name: 'üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™ (CSV)', value: 'quarterly-csv' },
          { name: 'üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏õ‡∏µ (JSON)', value: 'annual-json' },
          { name: 'üë• ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô (CSV)', value: 'staff-csv' },
          { name: 'üéØ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• KPI (JSON)', value: 'kpi-json' }
        ]
      }
    ]);

    console.log(chalk.yellow('üöß ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤'));
    console.log('‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå exports/ ‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏ï‡πå');
  }

  private async handleBulkDataEntry(): Promise<void> {
    console.log(chalk.bold.magenta('\nüë• ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°'));
    console.log('‚îÄ'.repeat(40));

    const { bulkType } = await inquirer.prompt([
      {
        type: 'list',
        name: 'bulkType',
        message: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏ö‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°:',
        choices: [
          { name: 'üéØ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å KPI ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô', value: 'same-kpi' },
          { name: 'üë• ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏´‡∏•‡∏≤‡∏¢ KPI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß', value: 'same-person' },
          { name: 'üìä ‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢ KPI ‡πÅ‡∏ö‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°', value: 'assign-bulk' }
        ]
      }
    ]);

    switch (bulkType) {
      case 'same-kpi':
        await this.handleSameKPIBulkEntry();
        break;
      case 'same-person':
        await this.handleSamePersonBulkEntry();
        break;
      case 'assign-bulk':
        await this.handleBulkKPIAssignment();
        break;
    }
  }

  private async handleSameKPIBulkEntry(): Promise<void> {
    console.log(chalk.bold.cyan('\nüéØ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å KPI ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô'));
    console.log('‚îÄ'.repeat(50));

    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å KPI
    const kpis = await this.kpiService.findAll();
    const activeKpis = kpis.filter(kpi => kpi.active);
    
    if (activeKpis.length === 0) {
      console.log(chalk.yellow('‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏°‡∏µ KPI ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà'));
      return;
    }

    const { kpiId } = await inquirer.prompt([
      {
        type: 'list',
        name: 'kpiId',
        message: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å KPI:',
        choices: activeKpis.map(kpi => ({
          name: `${kpi.name} (‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å: ${kpi.weight}%)`,
          value: kpi.id
        }))
      }
    ]);

    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô
    const staff = await this.staffService.findAll();
    const activeStaff = staff.filter(s => s.active);
    
    if (activeStaff.length === 0) {
      console.log(chalk.yellow('‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà'));
      return;
    }

    const { selectedStaff } = await inquirer.prompt([
      {
        type: 'checkbox',
        name: 'selectedStaff',
        message: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô (‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô):',
        choices: activeStaff.map(s => ({
          name: `${s.name} (${s.employeeId}) - ${s.position}`,
          value: s.id
        })),
        validate: (input) => input.length > 0 || '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏Ñ‡∏ô'
      }
    ]);

    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
    const { year, quarter } = await inquirer.prompt([
      {
        type: 'input',
        name: 'year',
        message: '‡∏õ‡∏µ:',
        default: new Date().getFullYear().toString(),
        validate: (input) => {
          const year = parseInt(input);
          return (year >= 2020 && year <= 2030) ? true : '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏õ‡∏µ‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 2020-2030';
        }
      },
      {
        type: 'list',
        name: 'quarter',
        message: '‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™:',
        choices: [
          { name: '‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™‡∏ó‡∏µ‡πà 1', value: 1 },
          { name: '‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™‡∏ó‡∏µ‡πà 2', value: 2 },
          { name: '‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™‡∏ó‡∏µ‡πà 3', value: 3 },
          { name: '‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™‡∏ó‡∏µ‡πà 4', value: 4 }
        ],
        default: Math.ceil((new Date().getMonth() + 1) / 3)
      }
    ]);

    console.log(chalk.blue(`\nüîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${selectedStaff.length} ‡∏Ñ‡∏ô...`));

    let successCount = 0;
    let errorCount = 0;

    for (const staffId of selectedStaff) {
      const employee = activeStaff.find(s => s.id === staffId);
      console.log(chalk.gray(`\nüë§ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: ${employee?.name}`));
      
      // ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö KPI ‡∏ô‡∏µ‡πâ
      console.log('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö KPI ‡∏ô‡∏µ‡πâ:');
      
      // ‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö demo)
      const { dataValue } = await inquirer.prompt([
        {
          type: 'number',
          name: 'dataValue',
          message: '‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:',
          validate: (input) => !isNaN(input) || '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç'
        }
      ]);

      try {
        await this.dataEntryService.createEntry({
          staffId,
          kpiId,
          periodYear: parseInt(year),
          periodQuarter: quarter,
          dataValues: { value: dataValue }
        });
        
        successCount++;
        console.log(chalk.green('‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'));
      } catch (error: any) {
        errorCount++;
        console.log(chalk.red(`‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`));
      }
    }

    console.log(chalk.bold.green(`\nüèÜ ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏ö‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°:`));
    console.log(`‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${successCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    console.log(`‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${errorCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
  }

  private async handleSamePersonBulkEntry(): Promise<void> {
    console.log(chalk.yellow('üöß ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤'));
  }

  private async handleBulkKPIAssignment(): Promise<void> {
    console.log(chalk.bold.magenta('\nüìä ‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢ KPI ‡πÅ‡∏ö‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°'));
    console.log('‚îÄ'.repeat(40));

    const { assignmentType } = await inquirer.prompt([
      {
        type: 'list',
        name: 'assignmentType',
        message: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢:',
        choices: [
          { name: 'üè¢ ‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢ KPI ‡πÉ‡∏´‡πâ‡∏ó‡∏±‡πâ‡∏á‡πÅ‡∏ú‡∏ô‡∏Å', value: 'department' },
          { name: 'üë• ‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢ KPI ‡πÉ‡∏´‡πâ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô', value: 'multiple-staff' },
          { name: 'üéØ ‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢ KPI ‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡πâ‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß', value: 'multiple-kpis' }
        ]
      }
    ]);

    switch (assignmentType) {
      case 'department':
        await this.assignKPIsToDepartment();
        break;
      case 'multiple-staff':
        await this.assignKPIsToMultipleStaff();
        break;
      case 'multiple-kpis':
        await this.assignMultipleKPIsToStaff();
        break;
    }
  }

  private async assignKPIsToDepartment(): Promise<void> {
    const departments = await this.departmentService.findAll();
    if (departments.length === 0) {
      console.log(chalk.yellow('‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏ú‡∏ô‡∏Å‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'));
      return;
    }

    const { departmentId } = await inquirer.prompt([
      {
        type: 'list',
        name: 'departmentId',
        message: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å:',
        choices: departments.map(dept => ({
          name: dept.name,
          value: dept.id
        }))
      }
    ]);

    const kpis = await this.kpiService.findAll();
    const activeKpis = kpis.filter(kpi => kpi.active);
    
    if (activeKpis.length === 0) {
      console.log(chalk.yellow('‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏°‡∏µ KPI ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà'));
      return;
    }

    const { selectedKPIs } = await inquirer.prompt([
      {
        type: 'checkbox',
        name: 'selectedKPIs',
        message: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å KPI ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢:',
        choices: activeKpis.map(kpi => ({
          name: `${kpi.name} (‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å: ${kpi.weight}%)`,
          value: kpi.id
        })),
        validate: (input) => input.length > 0 || '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å KPI ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏ï‡∏±‡∏ß'
      }
    ]);

    const departmentStaff = await this.staffService.findByDepartment(departmentId);
    const activeStaff = departmentStaff.filter(s => s.active);
    
    if (activeStaff.length === 0) {
      console.log(chalk.yellow('‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÅ‡∏ú‡∏ô‡∏Å‡∏ô‡∏µ‡πâ'));
      return;
    }

    console.log(chalk.blue(`\nüîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢ ${selectedKPIs.length} KPI ‡πÉ‡∏´‡πâ ${activeStaff.length} ‡∏Ñ‡∏ô...`));

    let successCount = 0;
    let errorCount = 0;

    for (const staffId of activeStaff.map(s => s.id)) {
      for (const kpiId of selectedKPIs) {
        try {
          await this.staffKPIService.assignKPI({ staffId, kpiId });
          successCount++;
        } catch (error: any) {
          errorCount++;
          console.log(chalk.red(`‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢: ${error.message}`));
        }
      }
    }

    console.log(chalk.bold.green(`\nüèÜ ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°:`));
    console.log(`‚úÖ ‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${successCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    console.log(`‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${errorCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
  }

  private async assignKPIsToMultipleStaff(): Promise<void> {
    console.log(chalk.yellow('üöß ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤'));
  }

  private async assignMultipleKPIsToStaff(): Promise<void> {
    console.log(chalk.yellow('üöß ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤'));
  }

  private async handleDepartmentDataEntry(): Promise<void> {
    console.log(chalk.bold.green('\nüè¢ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡πÅ‡∏ú‡∏ô‡∏Å'));
    console.log('‚îÄ'.repeat(40));

    const departments = await this.departmentService.findAll();
    if (departments.length === 0) {
      console.log(chalk.yellow('‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏ú‡∏ô‡∏Å‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'));
      return;
    }

    const { departmentId } = await inquirer.prompt([
      {
        type: 'list',
        name: 'departmentId',
        message: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å:',
        choices: departments.map(dept => ({
          name: dept.name,
          value: dept.id
        }))
      }
    ]);

    const departmentStaff = await this.staffService.findByDepartment(departmentId);
    const activeStaff = departmentStaff.filter(s => s.active);
    
    if (activeStaff.length === 0) {
      console.log(chalk.yellow('‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÅ‡∏ú‡∏ô‡∏Å‡∏ô‡∏µ‡πâ'));
      return;
    }

    console.log(chalk.blue(`\nüë• ‡∏û‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡πÅ‡∏ú‡∏ô‡∏Å: ${activeStaff.length} ‡∏Ñ‡∏ô`));
    activeStaff.forEach((staff, index) => {
      console.log(`  ${index + 1}. ${staff.name} (${staff.employeeId})`);
    });

    const { confirmDepartmentEntry } = await inquirer.prompt([
      {
        type: 'confirm',
        name: 'confirmDepartmentEntry',
        message: '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',
        default: false
      }
    ]);

    if (!confirmDepartmentEntry) {
      console.log(chalk.gray('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡πÅ‡∏ú‡∏ô‡∏Å'));
      return;
    }

    console.log(chalk.yellow('üöß ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤'));
  }
}