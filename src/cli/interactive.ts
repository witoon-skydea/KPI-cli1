import inquirer from 'inquirer';
import chalk from 'chalk';
import { DepartmentService } from '../core/services/DepartmentService.js';
import { StaffService } from '../core/services/StaffService.js';
import { KPIService } from '../core/services/KPIService.js';
import { StaffKPIService } from '../core/services/StaffKPIService.js';
import { DataEntryService } from '../core/services/DataEntryService.js';
import { EvaluationService } from '../core/services/EvaluationService.js';
import { ReportService } from '../core/services/ReportService.js';
import { closeDatabase } from '../database/connection.js';
import type { Department, Staff, KPI } from '../types/index.js';

export class InteractiveCLI {
  private departmentService = new DepartmentService();
  private staffService = new StaffService();
  private kpiService = new KPIService();
  private staffKPIService = new StaffKPIService();
  private dataEntryService = new DataEntryService();
  private evaluationService = new EvaluationService();
  private reportService = new ReportService();

  async start(): Promise<void> {
    console.log(chalk.bold.cyan('\nüéØ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ KPI'));
    console.log(chalk.cyan('‚ïê'.repeat(50)));

    while (true) {
      try {
        const { action } = await inquirer.prompt([
          {
            type: 'list',
            name: 'action',
            message: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:',
            choices: [
              { name: 'üìä ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô', value: 'reports' },
              { name: 'üë• ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô', value: 'staff' },
              { name: 'üéØ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ KPI', value: 'kpi' },
              { name: 'üìù ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏á‡∏≤‡∏ô', value: 'data-entry' },
              { name: 'üîÑ ‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢ KPI', value: 'assign-kpi' },
              { name: 'üè¢ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏ú‡∏ô‡∏Å', value: 'departments' },
              { name: 'üö™ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö', value: 'exit' }
            ]
          }
        ]);

        switch (action) {
          case 'reports':
            await this.handleReports();
            break;
          case 'staff':
            await this.handleStaff();
            break;
          case 'kpi':
            await this.handleKPI();
            break;
          case 'data-entry':
            await this.handleDataEntry();
            break;
          case 'assign-kpi':
            await this.handleAssignKPI();
            break;
          case 'departments':
            await this.handleDepartments();
            break;
          case 'exit':
            console.log(chalk.green('\nüëã ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£!'));
            return;
        }

        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
        console.log('\n' + '‚îÄ'.repeat(50));
        
        const { continue: continueWork } = await inquirer.prompt([
          {
            type: 'confirm',
            name: 'continue',
            message: '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',
            default: true
          }
        ]);

        if (!continueWork) {
          console.log(chalk.green('\nüëã ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£!'));
          break;
        }

      } catch (error: any) {
        console.error(chalk.red(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`));
        
        const { retry } = await inquirer.prompt([
          {
            type: 'confirm',
            name: 'retry',
            message: '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',
            default: true
          }
        ]);

        if (!retry) break;
      }
    }

    closeDatabase();
  }

  private async handleReports(): Promise<void> {
    console.log(chalk.bold.yellow('\nüìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô'));
    console.log('‚îÄ'.repeat(30));

    const { reportType } = await inquirer.prompt([
      {
        type: 'list',
        name: 'reportType',
        message: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô:',
        choices: [
          { name: 'üìà ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™', value: 'quarterly' },
          { name: 'üìÖ ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏õ‡∏µ (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°)', value: 'annual' },
          { name: 'üîô ‡∏Å‡∏•‡∏±‡∏ö', value: 'back' }
        ]
      }
    ]);

    if (reportType === 'back') return;

    if (reportType === 'quarterly') {
      await this.generateQuarterlyReport();
    } else {
      console.log(chalk.yellow('üöß ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'));
    }
  }

  private async generateQuarterlyReport(): Promise<void> {
    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å
    const departments = await this.departmentService.findAll();
    if (departments.length === 0) {
      console.log(chalk.red('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÅ‡∏ú‡∏ô‡∏Å‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'));
      return;
    }

    const { departmentId } = await inquirer.prompt([
      {
        type: 'list',
        name: 'departmentId',
        message: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å:',
        choices: departments.map(dept => ({
          name: `${dept.name} (${dept.description || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢'})`,
          value: dept.id
        }))
      }
    ]);

    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ
    const currentYear = new Date().getFullYear();
    const { year } = await inquirer.prompt([
      {
        type: 'list',
        name: 'year',
        message: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ:',
        choices: [
          { name: `${currentYear} (‡∏õ‡∏µ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)`, value: currentYear },
          { name: `${currentYear - 1}`, value: currentYear - 1 },
          { name: `${currentYear + 1}`, value: currentYear + 1 }
        ]
      }
    ]);

    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™
    const { quarter } = await inquirer.prompt([
      {
        type: 'list',
        name: 'quarter',
        message: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™:',
        choices: [
          { name: '‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™‡∏ó‡∏µ‡πà 1 (‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°-‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°)', value: 1 },
          { name: '‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™‡∏ó‡∏µ‡πà 2 (‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô-‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô)', value: 2 },
          { name: '‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™‡∏ó‡∏µ‡πà 3 (‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°-‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô)', value: 3 },
          { name: '‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™‡∏ó‡∏µ‡πà 4 (‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°-‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°)', value: 4 }
        ]
      }
    ]);

    console.log(chalk.blue('\nüîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô...\n'));

    try {
      const report = await this.reportService.generateQuarterlyReport(
        departmentId,
        year,
        quarter
      );

      this.displayQuarterlyReport(report);
    } catch (error: any) {
      console.error(chalk.red(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ: ${error.message}`));
    }
  }

  private displayQuarterlyReport(report: any): void {
    const { period, department, staffReports, departmentSummary } = report;

    // Header
    console.log(chalk.bold.cyan('‚ïê'.repeat(80)));
    console.log(chalk.bold.cyan(`üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô ${period.displayName}`));
    console.log(chalk.bold.cyan(`üè¢ ‡πÅ‡∏ú‡∏ô‡∏Å: ${department.name}`));
    console.log(chalk.bold.cyan('‚ïê'.repeat(80)));

    // Department Summary
    console.log(chalk.bold.yellow('\nüìà ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡∏Å'));
    console.log('‚îÄ'.repeat(50));
    console.log(`üë• ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô: ${departmentSummary.totalStaff} ‡∏Ñ‡∏ô`);
    console.log(`üìä ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: ${this.reportService.formatPercentage(departmentSummary.averageScore)}`);
    
    console.log('\nüèÜ ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡∏£‡∏î:');
    Object.entries(departmentSummary.gradeDistribution).forEach(([grade, count]) => {
      const color = this.reportService.getGradeColor(grade);
      console.log(`  ${chalk[color](`‡πÄ‡∏Å‡∏£‡∏î ${grade}`)}: ${count} ‡∏Ñ‡∏ô`);
    });

    if (departmentSummary.topPerformers.length > 0) {
      console.log('\nüåü ‡∏ú‡∏π‡πâ‡∏°‡∏µ‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡∏î‡∏µ‡πÄ‡∏î‡πà‡∏ô:');
      departmentSummary.topPerformers.forEach((staff: any, index: number) => {
        console.log(`  ${index + 1}. ${staff.name} (${staff.position})`);
      });
    }

    // Individual Staff Reports
    console.log(chalk.bold.green('\nüë§ ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•'));
    console.log('‚ïê'.repeat(80));

    staffReports.forEach((staffReport: any, index: number) => {
      const { staff, evaluations, summary } = staffReport;
      
      console.log(`\n${index + 1}. ${chalk.bold(staff.name)} (${staff.position})`);
      console.log(`   üèÜ ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°: ${this.reportService.formatPercentage(summary.percentageScore || 0)} (‡πÄ‡∏Å‡∏£‡∏î ${chalk[this.reportService.getGradeColor(summary.grade || 'F')](summary.grade || 'F')})`);
      
      console.log('   üìä ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î KPI:');
      evaluations.forEach((evaluation: any) => {
        const achievementPercent = evaluation.targetValue > 0 
          ? ((evaluation.calculatedValue / evaluation.targetValue) * 100).toFixed(1)
          : 'N/A';
        
        console.log(`      ‚Ä¢ ${evaluation.kpi.name}`);
        console.log(`        ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: ${this.reportService.formatScore(evaluation.score)} | ‡∏ú‡∏•‡∏à‡∏£‡∏¥‡∏á: ${evaluation.calculatedValue} | ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: ${evaluation.targetValue || 'N/A'}`);
        if (achievementPercent !== 'N/A') {
          console.log(`        ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${achievementPercent}%`);
        }
      });
      
      if (index < staffReports.length - 1) {
        console.log('   ' + '‚îÄ'.repeat(50));
      }
    });

    console.log(chalk.bold.cyan('\n‚ïê'.repeat(80)));
  }

  private async handleStaff(): Promise<void> {
    console.log(chalk.bold.yellow('\nüë• ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô'));
    console.log('‚îÄ'.repeat(20));

    const { staffAction } = await inquirer.prompt([
      {
        type: 'list',
        name: 'staffAction',
        message: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£:',
        choices: [
          { name: 'üìã ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô', value: 'list' },
          { name: '‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà', value: 'add' },
          { name: 'üîô ‡∏Å‡∏•‡∏±‡∏ö', value: 'back' }
        ]
      }
    ]);

    if (staffAction === 'back') return;

    switch (staffAction) {
      case 'list':
        await this.listStaff();
        break;
      case 'add':
        await this.addStaff();
        break;
    }
  }

  private async listStaff(): Promise<void> {
    const staff = await this.staffService.findAll();
    
    if (staff.length === 0) {
      console.log(chalk.yellow('üìù ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'));
      return;
    }

    console.log(chalk.bold.green('\nüìã ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô'));
    console.log('‚îÄ'.repeat(50));

    staff.forEach((employee, index) => {
      console.log(`${index + 1}. ${chalk.bold(employee.name)} (${employee.employeeId})`);
      console.log(`   üìß ${employee.email}`);
      console.log(`   üè¢ ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: ${employee.position}`);
      console.log(`   üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô: ${employee.hireDate}`);
      if (index < staff.length - 1) {
        console.log('');
      }
    });
  }

  private async addStaff(): Promise<void> {
    console.log(chalk.bold.blue('\n‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà'));
    console.log('‚îÄ'.repeat(20));

    // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ú‡∏ô‡∏Å
    const departments = await this.departmentService.findAll();
    if (departments.length === 0) {
      console.log(chalk.red('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÅ‡∏ú‡∏ô‡∏Å‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏Å‡πà‡∏≠‡∏ô'));
      return;
    }

    const answers = await inquirer.prompt([
      {
        type: 'input',
        name: 'employeeId',
        message: '‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô:',
        validate: (input: string) => input.length > 0 || '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô'
      },
      {
        type: 'input',
        name: 'name',
        message: '‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•:',
        validate: (input: string) => input.length > 0 || '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•'
      },
      {
        type: 'input',
        name: 'email',
        message: '‡∏≠‡∏µ‡πÄ‡∏°‡∏•:',
        validate: (input: string) => {
          if (input.length === 0) return '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏≠‡∏µ‡πÄ‡∏°‡∏•';
          if (!input.includes('@')) return '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
          return true;
        }
      },
      {
        type: 'list',
        name: 'departmentId',
        message: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å:',
        choices: departments.map(dept => ({
          name: dept.name,
          value: dept.id
        }))
      },
      {
        type: 'input',
        name: 'position',
        message: '‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á:',
        validate: (input: string) => input.length > 0 || '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á'
      },
      {
        type: 'input',
        name: 'hireDate',
        message: '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô (YYYY-MM-DD):',
        default: new Date().toISOString().split('T')[0],
        validate: (input: string) => {
          if (!/^\d{4}-\d{2}-\d{2}$/.test(input)) {
            return '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (YYYY-MM-DD)';
          }
          return true;
        }
      }
    ]);

    try {
      const newStaff = await this.staffService.create(answers);
      console.log(chalk.green(`‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô ${newStaff.name} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`));
    } catch (error: any) {
      console.error(chalk.red(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ: ${error.message}`));
    }
  }

  private async handleKPI(): Promise<void> {
    console.log(chalk.bold.yellow('\nüéØ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ KPI'));
    console.log('‚îÄ'.repeat(15));

    const { kpiAction } = await inquirer.prompt([
      {
        type: 'list',
        name: 'kpiAction',
        message: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£:',
        choices: [
          { name: 'üìã ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ KPI', value: 'list' },
          { name: '‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏° KPI ‡πÉ‡∏´‡∏°‡πà', value: 'add' },
          { name: 'üîô ‡∏Å‡∏•‡∏±‡∏ö', value: 'back' }
        ]
      }
    ]);

    if (kpiAction === 'back') return;

    switch (kpiAction) {
      case 'list':
        await this.listKPIs();
        break;
      case 'add':
        await this.addKPI();
        break;
    }
  }

  private async listKPIs(): Promise<void> {
    const kpis = await this.kpiService.findAll();
    
    if (kpis.length === 0) {
      console.log(chalk.yellow('üìù ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ KPI ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'));
      return;
    }

    console.log(chalk.bold.green('\nüìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ KPI'));
    console.log('‚îÄ'.repeat(50));

    kpis.forEach((kpi, index) => {
      console.log(`${index + 1}. ${chalk.bold(kpi.name)}`);
      console.log(`   üìù ${kpi.description}`);
      console.log(`   ‚öñÔ∏è ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å: ${kpi.weight}`);
      console.log(`   üéØ ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: ${kpi.targetValue || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`);
      if (index < kpis.length - 1) {
        console.log('');
      }
    });
  }

  private async addKPI(): Promise<void> {
    console.log(chalk.bold.blue('\n‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏° KPI ‡πÉ‡∏´‡∏°‡πà'));
    console.log('‚îÄ'.repeat(20));

    const answers = await inquirer.prompt([
      {
        type: 'input',
        name: 'name',
        message: '‡∏ä‡∏∑‡πà‡∏≠ KPI:',
        validate: (input: string) => input.length > 0 || '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠ KPI'
      },
      {
        type: 'input',
        name: 'description',
        message: '‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢:',
        validate: (input: string) => input.length > 0 || '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢'
      },
      {
        type: 'number',
        name: 'weight',
        message: '‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å (1.0-5.0):',
        default: 1.0,
        validate: (input: number) => {
          if (isNaN(input) || input < 0.1 || input > 5.0) {
            return '‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 0.1-5.0';
          }
          return true;
        }
      },
      {
        type: 'number',
        name: 'targetValue',
        message: '‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ (‡πÄ‡∏•‡∏Ç‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°, ‡∏´‡∏£‡∏∑‡∏≠ 0 ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ):',
        default: 0
      }
    ]);

    try {
      const newKPI = await this.kpiService.create({
        name: answers.name,
        description: answers.description,
        weight: answers.weight,
        targetValue: answers.targetValue > 0 ? answers.targetValue : null
      });
      console.log(chalk.green(`‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° KPI "${newKPI.name}" ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`));
    } catch (error: any) {
      console.error(chalk.red(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° KPI ‡πÑ‡∏î‡πâ: ${error.message}`));
    }
  }

  private async handleDataEntry(): Promise<void> {
    console.log(chalk.bold.yellow('\nüìù ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏á‡∏≤‡∏ô'));
    console.log('‚îÄ'.repeat(25));

    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
    const staff = await this.staffService.findAll();
    if (staff.length === 0) {
      console.log(chalk.red('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'));
      return;
    }

    const { staffId } = await inquirer.prompt([
      {
        type: 'list',
        name: 'staffId',
        message: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô:',
        choices: staff.map(s => ({
          name: `${s.name} (${s.employeeId})`,
          value: s.id
        }))
      }
    ]);

    // ‡∏î‡∏∂‡∏á KPI ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
    const assignments = await this.staffKPIService.getStaffKPIs(staffId);
    const activeAssignments = assignments.filter(a => a.active);

    if (activeAssignments.length === 0) {
      console.log(chalk.red('‚ùå ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢ KPI'));
      return;
    }

    const { kpiId } = await inquirer.prompt([
      {
        type: 'list',
        name: 'kpiId',
        message: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å KPI:',
        choices: activeAssignments.map(a => ({
          name: `${a.kpiName} (‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å: ${a.kpiWeight})`,
          value: a.kpiId
        }))
      }
    ]);

    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
    const currentYear = new Date().getFullYear();
    const { year, quarter } = await inquirer.prompt([
      {
        type: 'list',
        name: 'year',
        message: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ:',
        choices: [
          { name: `${currentYear}`, value: currentYear },
          { name: `${currentYear - 1}`, value: currentYear - 1 },
          { name: `${currentYear + 1}`, value: currentYear + 1 }
        ]
      },
      {
        type: 'list',
        name: 'quarter',
        message: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™:',
        choices: [
          { name: '‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™‡∏ó‡∏µ‡πà 1', value: 1 },
          { name: '‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™‡∏ó‡∏µ‡πà 2', value: 2 },
          { name: '‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™‡∏ó‡∏µ‡πà 3', value: 3 },
          { name: '‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™‡∏ó‡∏µ‡πà 4', value: 4 }
        ]
      }
    ]);

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• KPI
    const kpi = await this.kpiService.findById(kpiId);
    if (!kpi) {
      console.log(chalk.red('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• KPI'));
      return;
    }

    console.log(chalk.blue(`\nüìä ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: ${kpi.name}`));
    console.log(`üìù ${kpi.description}`);

    // ‡∏ñ‡πâ‡∏≤ KPI ‡∏°‡∏µ raw data schema ‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏≤‡∏° schema
    if (kpi.rawDataSchemaJson && kpi.rawDataSchemaJson.fields) {
      const dataValues: Record<string, number> = {};
      
      for (const field of kpi.rawDataSchemaJson.fields) {
        const { value } = await inquirer.prompt([
          {
            type: 'number',
            name: 'value',
            message: `${field.description || field.name}:`,
            validate: (input: number) => {
              if (field.required && (isNaN(input) || input === null)) {
                return '‡∏ä‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å';
              }
              return true;
            }
          }
        ]);
        dataValues[field.name] = value;
      }

      try {
        await this.dataEntryService.createEntry({
          staffId,
          kpiId,
          periodYear: year,
          periodQuarter: quarter,
          dataValues
        });

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
        const evaluation = await this.evaluationService.calculateKPIEvaluation({
          staffId,
          kpiId,
          periodYear: year,
          periodQuarter: quarter
        });

        console.log(chalk.green(`‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`));
        console.log(chalk.blue(`üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô: ${evaluation.calculatedValue} (${evaluation.score}/5 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô)`));
      } catch (error: any) {
        console.error(chalk.red(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: ${error.message}`));
      }
    } else {
      // KPI ‡πÑ‡∏°‡πà‡∏°‡∏µ schema ‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
      const { value } = await inquirer.prompt([
        {
          type: 'number',
          name: 'value',
          message: `‡∏Ñ‡πà‡∏≤‡∏ú‡∏•‡∏á‡∏≤‡∏ô:`,
          validate: (input: number) => !isNaN(input) || '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç'
        }
      ]);

      try {
        await this.dataEntryService.createEntry({
          staffId,
          kpiId,
          periodYear: year,
          periodQuarter: quarter,
          dataValues: { value }
        });

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
        const evaluation = await this.evaluationService.calculateKPIEvaluation({
          staffId,
          kpiId,
          periodYear: year,
          periodQuarter: quarter
        });

        console.log(chalk.green(`‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`));
        console.log(chalk.blue(`üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô: ${evaluation.calculatedValue} (${evaluation.score}/5 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô)`));
      } catch (error: any) {
        console.error(chalk.red(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: ${error.message}`));
      }
    }
  }

  private async handleAssignKPI(): Promise<void> {
    console.log(chalk.bold.yellow('\nüîÑ ‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢ KPI'));
    console.log('‚îÄ'.repeat(20));

    const { assignAction } = await inquirer.prompt([
      {
        type: 'list',
        name: 'assignAction',
        message: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£:',
        choices: [
          { name: '‚ûï ‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢ KPI ‡πÉ‡∏´‡∏°‡πà', value: 'assign' },
          { name: 'üìã ‡∏î‡∏π‡∏Å‡∏≤‡∏£‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô', value: 'list' },
          { name: 'üîô ‡∏Å‡∏•‡∏±‡∏ö', value: 'back' }
        ]
      }
    ]);

    if (assignAction === 'back') return;

    switch (assignAction) {
      case 'assign':
        await this.assignKPI();
        break;
      case 'list':
        await this.listAssignments();
        break;
    }
  }

  private async assignKPI(): Promise<void> {
    console.log(chalk.bold.blue('\n‚ûï ‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢ KPI ‡πÉ‡∏´‡∏°‡πà'));
    console.log('‚îÄ'.repeat(20));

    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
    const staff = await this.staffService.findAll();
    if (staff.length === 0) {
      console.log(chalk.red('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'));
      return;
    }

    const { staffId } = await inquirer.prompt([
      {
        type: 'list',
        name: 'staffId',
        message: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô:',
        choices: staff.map(s => ({
          name: `${s.name} (${s.employeeId})`,
          value: s.id
        }))
      }
    ]);

    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å KPI
    const kpis = await this.kpiService.findAll();
    if (kpis.length === 0) {
      console.log(chalk.red('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö KPI ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'));
      return;
    }

    const { kpiId } = await inquirer.prompt([
      {
        type: 'list',
        name: 'kpiId',
        message: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å KPI:',
        choices: kpis.map(k => ({
          name: `${k.name} (‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å: ${k.weight})`,
          value: k.id
        }))
      }
    ]);

    try {
      await this.staffKPIService.assignKPI({
        staffId,
        kpiId,
        assignedDate: new Date().toISOString()
      });

      const selectedStaff = staff.find(s => s.id === staffId);
      const selectedKPI = kpis.find(k => k.id === kpiId);
      
      console.log(chalk.green(`‚úÖ ‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢ "${selectedKPI?.name}" ‡πÉ‡∏´‡πâ ${selectedStaff?.name} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`));
    } catch (error: any) {
      console.error(chalk.red(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢ KPI ‡πÑ‡∏î‡πâ: ${error.message}`));
    }
  }

  private async listAssignments(): Promise<void> {
    const assignments = await this.staffKPIService.getActiveAssignments();
    
    if (assignments.length === 0) {
      console.log(chalk.yellow('üìù ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢ KPI'));
      return;
    }

    console.log(chalk.bold.green('\nüìã ‡∏Å‡∏≤‡∏£‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢ KPI ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô'));
    console.log('‚îÄ'.repeat(50));

    assignments.forEach((assignment, index) => {
      console.log(`${index + 1}. ${chalk.bold(assignment.staffName)} ‚Üí ${assignment.kpiName}`);
      console.log(`   üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢: ${assignment.assignedDate}`);
      console.log(`   ‚öñÔ∏è ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å: ${assignment.kpiWeight}`);
      if (index < assignments.length - 1) {
        console.log('');
      }
    });
  }

  private async handleDepartments(): Promise<void> {
    console.log(chalk.bold.yellow('\nüè¢ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏ú‡∏ô‡∏Å'));
    console.log('‚îÄ'.repeat(15));

    const { deptAction } = await inquirer.prompt([
      {
        type: 'list',
        name: 'deptAction',
        message: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£:',
        choices: [
          { name: 'üìã ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ú‡∏ô‡∏Å', value: 'list' },
          { name: '‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ú‡∏ô‡∏Å‡πÉ‡∏´‡∏°‡πà', value: 'add' },
          { name: 'üîô ‡∏Å‡∏•‡∏±‡∏ö', value: 'back' }
        ]
      }
    ]);

    if (deptAction === 'back') return;

    switch (deptAction) {
      case 'list':
        await this.listDepartments();
        break;
      case 'add':
        await this.addDepartment();
        break;
    }
  }

  private async listDepartments(): Promise<void> {
    const departments = await this.departmentService.findAll();
    
    if (departments.length === 0) {
      console.log(chalk.yellow('üìù ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏ú‡∏ô‡∏Å‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'));
      return;
    }

    console.log(chalk.bold.green('\nüìã ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ú‡∏ô‡∏Å'));
    console.log('‚îÄ'.repeat(50));

    for (const dept of departments) {
      const staffCount = await this.staffService.findByDepartment(dept.id);
      console.log(`${chalk.bold(dept.name)}`);
      console.log(`   üìù ${dept.description || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢'}`);
      console.log(`   üë• ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô: ${staffCount.length} ‡∏Ñ‡∏ô`);
      console.log('');
    }
  }

  private async addDepartment(): Promise<void> {
    console.log(chalk.bold.blue('\n‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ú‡∏ô‡∏Å‡πÉ‡∏´‡∏°‡πà'));
    console.log('‚îÄ'.repeat(20));

    const answers = await inquirer.prompt([
      {
        type: 'input',
        name: 'name',
        message: '‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ú‡∏ô‡∏Å:',
        validate: (input: string) => input.length > 0 || '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ú‡∏ô‡∏Å'
      },
      {
        type: 'input',
        name: 'description',
        message: '‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢ (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö):'
      }
    ]);

    try {
      const newDept = await this.departmentService.create({
        name: answers.name,
        description: answers.description || null
      });
      console.log(chalk.green(`‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ú‡∏ô‡∏Å "${newDept.name}" ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`));
    } catch (error: any) {
      console.error(chalk.red(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ú‡∏ô‡∏Å‡πÑ‡∏î‡πâ: ${error.message}`));
    }
  }
}